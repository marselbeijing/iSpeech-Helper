const express = require('express');
const router = express.Router();
const TrialPeriod = require('../models/TrialPeriod');
const Subscription = require('../models/Subscription');

// CORS middleware –¥–ª—è –≤—Å–µ—Ö —Ä–æ—É—Ç–æ–≤ trial
router.use((req, res, next) => {
  console.log(`üõ£Ô∏è Trial route accessed: ${req.method} ${req.originalUrl} - params:`, req.params, 'query:', req.query);
  res.header('Access-Control-Allow-Origin', '*');
  res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
  res.header('Access-Control-Allow-Headers', 'Content-Type, Authorization, X-Requested-With, Accept, Origin');
  
  if (req.method === 'OPTIONS') {
    res.sendStatus(200);
  } else {
    next();
  }
});

// –ü—Ä–æ—Å—Ç–µ–π—à–∏–π —Ç–µ—Å—Ç endpoint
router.get('/test', (req, res) => {
  console.log('üß™ –¢–µ—Å—Ç–æ–≤—ã–π endpoint –≤—ã–∑–≤–∞–Ω');
  res.json({ 
    status: 'OK', 
    message: '–¢–µ—Å—Ç–æ–≤—ã–π endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç',
    timestamp: new Date().toISOString()
  });
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
router.get('/status/:userId', async (req, res) => {
  console.log('üéØ Trial status endpoint hit! userId:', req.params.userId, 'query:', req.query);
  
  // –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
  console.log('üîç –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏:');
  console.log('- TrialPeriod model:', !!TrialPeriod);
  console.log('- Subscription model:', !!Subscription);
  console.log('- req.params:', req.params);
  console.log('- req.query:', req.query);
  
  try {
    const { userId } = req.params;
    console.log('üîç Trial status request for userId:', userId);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
    console.log('üìä Checking for active subscription...');
    
    let activeSubscription;
    try {
      activeSubscription = await Subscription.findOne({
        userId: userId,
        status: 'active',
        expiresAt: { $gt: new Date() }
      });
      console.log('üìä Active subscription query completed, found:', !!activeSubscription);
    } catch (subError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏:', subError);
      throw subError;
    }

    if (activeSubscription) {
      console.log('‚úÖ User has active subscription, returning subscription info');
      return res.json({
        hasActiveSubscription: true,
        subscriptionType: activeSubscription.type,
        expiresAt: activeSubscription.expiresAt
      });
    }

    // –ò—â–µ–º –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥
    console.log('üîç Looking for trial period...');
    let trial = await TrialPeriod.findOne({ userId });
    console.log('üîç Trial found:', !!trial);
    
    if (!trial) {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥
      console.log('‚ûï Creating new trial period...');
      const startDate = new Date();
      trial = new TrialPeriod({
        userId,
        startDate,
        endDate: new Date(startDate.getTime() + (3 * 24 * 60 * 60 * 1000)), // 3 –¥–Ω—è
        userInfo: {
          languageCode: req.query.lang || 'ru'
        }
      });
      await trial.save();
      console.log('‚úÖ New trial period created:', trial);
    }

    console.log('üîç Trial object:', {
      userId: trial.userId,
      startDate: trial.startDate,
      endDate: trial.endDate,
      isActive: trial.isActive
    });
    
    let timeLeft, isActive;
    try {
      timeLeft = trial.getFormattedTimeLeft();
      console.log('‚úÖ getFormattedTimeLeft —É—Å–ø–µ—à–Ω–æ:', timeLeft);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ getFormattedTimeLeft:', error);
      timeLeft = { days: 0, hours: 0, minutes: 0, seconds: 0 };
    }
    
    try {
      isActive = trial.isTrialActive();
      console.log('‚úÖ isTrialActive —É—Å–ø–µ—à–Ω–æ:', isActive);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ isTrialActive:', error);
      isActive = false;
    }
    
    console.log('üìä Trial status:', { isActive, timeLeft });

    let timeLeftMs = 0;
    try {
      timeLeftMs = trial.getTimeLeft();
      console.log('‚úÖ getTimeLeft —É—Å–ø–µ—à–Ω–æ:', timeLeftMs);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ getTimeLeft:', error);
      timeLeftMs = 0;
    }

    res.json({
      hasActiveSubscription: false,
      trial: {
        isActive,
        hasSeenWelcome: trial.hasSeenWelcome,
        startDate: trial.startDate,
        endDate: trial.endDate,
        timeLeft,
        timeLeftMs
      }
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞:', error);
    console.error('‚ùå Stack trace:', error.stack);
    res.status(500).json({ 
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      details: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
});

// –û—Ç–º–µ—Ç–∫–∞ –æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
router.post('/welcome-seen/:userId', async (req, res) => {
  try {
    const { userId } = req.params;
    
    await TrialPeriod.findOneAndUpdate(
      { userId },
      { hasSeenWelcome: true },
      { upsert: true }
    );

    res.json({ success: true });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è:', error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏–∏
router.get('/check-access/:userId', async (req, res) => {
  try {
    const { userId } = req.params;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
    const activeSubscription = await Subscription.findOne({
      userId: userId,
      status: 'active',
      expiresAt: { $gt: new Date() }
    });

    if (activeSubscription) {
      return res.json({ hasAccess: true, reason: 'subscription' });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥
    const trial = await TrialPeriod.findOne({ userId });
    
    if (trial && trial.isTrialActive()) {
      return res.json({ hasAccess: true, reason: 'trial' });
    }

    res.json({ hasAccess: false, reason: 'expired' });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞:', error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
router.get('/user-language/:userId', async (req, res) => {
  try {
    const { userId } = req.params;
    console.log('üåê –ó–∞–ø—Ä–æ—Å —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);
    
    // –ò—â–µ–º –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const trial = await TrialPeriod.findOne({ userId });
    
    if (trial && trial.userInfo && trial.userInfo.languageCode) {
      console.log('‚úÖ –Ø–∑—ã–∫ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', trial.userInfo.languageCode);
      return res.json({ 
        language: trial.userInfo.languageCode,
        found: true 
      });
    }

    console.log('‚ö†Ô∏è –Ø–∑—ã–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);
    res.json({ 
      language: null,
      found: false 
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    res.status(500).json({ 
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      language: null,
      found: false 
    });
  }
});

module.exports = router; 