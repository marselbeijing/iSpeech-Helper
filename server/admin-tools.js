require('dotenv').config();
const mongoose = require('mongoose');
const Subscription = require('./models/Subscription');
const Invoice = require('./models/Invoice');
const StarsBalance = require('./models/StarsBalance');

async function connectDB() {
  if (!process.env.MONGODB_URI) {
    console.error('‚ùå MONGODB_URI –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ .env —Ñ–∞–π–ª–µ');
    process.exit(1);
  }
  
  await mongoose.connect(process.env.MONGODB_URI);
  console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB —É—Å–ø–µ—à–Ω–æ');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–æ–∫
async function getAllSubscriptions() {
  console.log('\nüìä –ê–ù–ê–õ–ò–ó –í–°–ï–• –ü–û–î–ü–ò–°–û–ö');
  console.log('='.repeat(50));
  
  const subscriptions = await Subscription.find({}).sort({ createdAt: -1 });
  
  if (subscriptions.length === 0) {
    console.log('‚ùå –ü–æ–¥–ø–∏—Å–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç');
    return;
  }
  
  console.log(`üìà –í—Å–µ–≥–æ –ø–æ–¥–ø–∏—Å–æ–∫ –≤ –±–∞–∑–µ: ${subscriptions.length}`);
  
  // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
  const byStatus = subscriptions.reduce((acc, sub) => {
    acc[sub.status] = (acc[sub.status] || 0) + 1;
    return acc;
  }, {});
  
  console.log('\nüìä –ü–æ —Å—Ç–∞—Ç—É—Å–∞–º:');
  Object.entries(byStatus).forEach(([status, count]) => {
    console.log(`   ${status}: ${count} —à—Ç.`);
  });
  
  // –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
  const active = subscriptions.filter(sub => sub.isActive && sub.expiresAt > new Date());
  console.log(`\nüü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: ${active.length}`);
  
  if (active.length > 0) {
    console.log('\nüéØ –ê–ö–¢–ò–í–ù–´–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò:');
    active.forEach((sub, i) => {
      const daysLeft = Math.ceil((sub.expiresAt - new Date()) / (1000 * 60 * 60 * 24));
      console.log(`${i + 1}. User ${sub.userId} | ${sub.type} | ${daysLeft} –¥–Ω–µ–π | ${sub.stars} ‚≠ê`);
    });
  }
  
  // –û–ø–ª–∞—á–µ–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
  const paid = subscriptions.filter(sub => sub.status === 'paid');
  if (paid.length > 0) {
    console.log(`\nüí∞ –û–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: ${paid.length}`);
    const totalRevenue = paid.reduce((sum, sub) => sum + sub.stars, 0);
    console.log(`üíé –û–±—â–∏–π –¥–æ—Ö–æ–¥: ${totalRevenue} ‚≠ê Stars`);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω–≤–æ–π—Å–æ–≤
async function getAllInvoices() {
  console.log('\nüìã –ê–ù–ê–õ–ò–ó –ò–ù–í–û–ô–°–û–í');
  console.log('='.repeat(50));
  
  const invoices = await Invoice.find({}).sort({ createdAt: -1 });
  
  if (invoices.length === 0) {
    console.log('‚ùå –ò–Ω–≤–æ–π—Å–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç');
    return;
  }
  
  console.log(`üìà –í—Å–µ–≥–æ –∏–Ω–≤–æ–π—Å–æ–≤: ${invoices.length}`);
  
  // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
  const byStatus = invoices.reduce((acc, inv) => {
    acc[inv.status] = (acc[inv.status] || 0) + 1;
    return acc;
  }, {});
  
  console.log('\nüìä –ü–æ —Å—Ç–∞—Ç—É—Å–∞–º:');
  Object.entries(byStatus).forEach(([status, count]) => {
    console.log(`   ${status}: ${count} —à—Ç.`);
  });
  
  // –û–ø–ª–∞—á–µ–Ω–Ω—ã–µ –∏–Ω–≤–æ–π—Å—ã
  const paid = invoices.filter(inv => inv.status === 'paid');
  if (paid.length > 0) {
    console.log(`\nüí∞ –û–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∏–Ω–≤–æ–π—Å–æ–≤: ${paid.length}`);
    console.log('\nüéØ –î–ï–¢–ê–õ–ò –û–ü–õ–ê–ß–ï–ù–ù–´–• –ò–ù–í–û–ô–°–û–í:');
    paid.forEach((inv, i) => {
      console.log(`${i + 1}. User ${inv.userId} | ${inv.subscriptionType} | ${inv.stars} ‚≠ê`);
      console.log(`   –î–∞—Ç–∞: ${inv.paidAt?.toLocaleString('ru-RU') || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}`);
      console.log(`   Charge ID: ${inv.telegramPaymentChargeId}`);
      console.log('-'.repeat(30));
    });
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤ Stars
async function getStarsBalances() {
  console.log('\n‚≠ê –ê–ù–ê–õ–ò–ó –ë–ê–õ–ê–ù–°–û–í STARS');
  console.log('='.repeat(50));
  
  const balances = await StarsBalance.find({}).sort({ totalEarned: -1 });
  
  if (balances.length === 0) {
    console.log('‚ùå –ë–∞–ª–∞–Ω—Å–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç');
    return;
  }
  
  console.log(`üìà –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –±–∞–ª–∞–Ω—Å–æ–º: ${balances.length}`);
  
  const totalBalance = balances.reduce((sum, bal) => sum + bal.balance, 0);
  const totalEarned = balances.reduce((sum, bal) => sum + bal.totalEarned, 0);
  
  console.log(`üí∞ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${totalBalance} ‚≠ê`);
  console.log(`üíé –û–±—â–∏–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${totalEarned} ‚≠ê`);
  
  console.log('\nüéØ –¢–û–ü –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô –ü–û –ó–ê–†–ê–ë–û–¢–ö–£:');
  balances.slice(0, 10).forEach((bal, i) => {
    console.log(`${i + 1}. User ${bal.userId} | –ë–∞–ª–∞–Ω—Å: ${bal.balance} ‚≠ê | –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: ${bal.totalEarned} ‚≠ê | –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${bal.referralsCount}`);
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function findUser(userId) {
  console.log(`\nüîç –ü–û–ò–°–ö –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø: ${userId}`);
  console.log('='.repeat(50));
  
  // –ü–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const subscriptions = await Subscription.find({ userId }).sort({ createdAt: -1 });
  console.log(`üì¶ –ü–æ–¥–ø–∏—Å–æ–∫: ${subscriptions.length}`);
  
  if (subscriptions.length > 0) {
    subscriptions.forEach((sub, i) => {
      const status = sub.isActive && sub.expiresAt > new Date() ? 'üü¢ –ê–∫—Ç–∏–≤–Ω–∞' : 'üî¥ –ù–µ–∞–∫—Ç–∏–≤–Ω–∞';
      console.log(`${i + 1}. ${sub.type} | ${sub.stars} ‚≠ê | ${status}`);
      console.log(`   –°–æ–∑–¥–∞–Ω–∞: ${sub.createdAt.toLocaleString('ru-RU')}`);
      console.log(`   –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: ${sub.expiresAt.toLocaleString('ru-RU')}`);
    });
  }
  
  // –ò–Ω–≤–æ–π—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const invoices = await Invoice.find({ userId }).sort({ createdAt: -1 });
  console.log(`\nüìã –ò–Ω–≤–æ–π—Å–æ–≤: ${invoices.length}`);
  
  if (invoices.length > 0) {
    invoices.forEach((inv, i) => {
      console.log(`${i + 1}. ${inv.subscriptionType} | ${inv.stars} ‚≠ê | ${inv.status}`);
      if (inv.paidAt) {
        console.log(`   –û–ø–ª–∞—á–µ–Ω: ${inv.paidAt.toLocaleString('ru-RU')}`);
      }
    });
  }
  
  // –ë–∞–ª–∞–Ω—Å Stars
  const balance = await StarsBalance.findOne({ userId });
  if (balance) {
    console.log(`\n‚≠ê –ë–∞–ª–∞–Ω—Å Stars: ${balance.balance} ‚≠ê`);
    console.log(`üíé –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: ${balance.totalEarned} ‚≠ê`);
    console.log(`üë• –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${balance.referralsCount}`);
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  try {
    await connectDB();
    
    const command = process.argv[2];
    const userId = process.argv[3];
    
    switch (command) {
      case 'subscriptions':
        await getAllSubscriptions();
        break;
      case 'invoices':
        await getAllInvoices();
        break;
      case 'balances':
        await getStarsBalances();
        break;
      case 'user':
        if (!userId) {
          console.log('‚ùå –£–∫–∞–∂–∏—Ç–µ userId: node admin-tools.js user 123456789');
          process.exit(1);
        }
        await findUser(userId);
        break;
      case 'all':
        await getAllSubscriptions();
        await getAllInvoices();
        await getStarsBalances();
        break;
      default:
        console.log('üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:');
        console.log('   node admin-tools.js subscriptions  - –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏');
        console.log('   node admin-tools.js invoices       - –≤—Å–µ –∏–Ω–≤–æ–π—Å—ã');
        console.log('   node admin-tools.js balances       - –±–∞–ª–∞–Ω—Å—ã Stars');
        console.log('   node admin-tools.js user 123456789 - –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        console.log('   node admin-tools.js all            - –≤—Å—ë —Å—Ä–∞–∑—É');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  } finally {
    await mongoose.disconnect();
    console.log('\nüîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç MongoDB');
  }
}

main(); 