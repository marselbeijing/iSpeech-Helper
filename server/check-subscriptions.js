require('dotenv').config();
const mongoose = require('mongoose');

// –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Ç–æ–π –∂–µ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, —á—Ç–æ –∏ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
const MONGODB_URI = process.env.MONGODB_URI || 'mongodb+srv://your-connection-string';

// –ú–æ–¥–µ–ª—å –ø–æ–¥–ø–∏—Å–∫–∏
const subscriptionSchema = new mongoose.Schema({
  userId: String,
  type: String,
  stars: Number,
  startDate: Date,
  expiresAt: Date,
  isActive: Boolean,
  transactionId: String,
  telegramPaymentChargeId: String,
  invoicePayload: String,
  paymentDate: Date,
  status: String,
}, {
  timestamps: true,
});

const Subscription = mongoose.model('Subscription', subscriptionSchema);

async function checkSubscriptions() {
  try {
    console.log('üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB...');
    await mongoose.connect(MONGODB_URI);
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!\n');

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
    const paidSubscriptions = await Subscription.find({ status: 'paid' })
      .sort({ paymentDate: -1 });

    console.log(`üìä –í—Å–µ–≥–æ –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: ${paidSubscriptions.length}\n`);
    console.log('='.repeat(60));

    if (paidSubscriptions.length === 0) {
      console.log('‚ùå –û–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç');
      return;
    }

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º
    const byType = paidSubscriptions.reduce((acc, sub) => {
      acc[sub.type] = (acc[sub.type] || 0) + 1;
      return acc;
    }, {});

    console.log('üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –ø–æ–¥–ø–∏—Å–æ–∫:');
    Object.entries(byType).forEach(([type, count]) => {
      console.log(`   ${type}: ${count} —à—Ç.`);
    });
    console.log('');

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏
    paidSubscriptions.forEach((sub, index) => {
      const isExpired = sub.expiresAt < new Date();
      const status = sub.isActive && !isExpired ? 'üü¢ –ê–∫—Ç–∏–≤–Ω–∞' : 'üî¥ –ù–µ–∞–∫—Ç–∏–≤–Ω–∞';
      
      console.log(`${index + 1}. üë§ User ID: ${sub.userId}`);
      console.log(`   üì¶ –¢–∏–ø: ${sub.type}`);
      console.log(`   ‚≠ê Stars: ${sub.stars}`);
      console.log(`   üí∞ –î–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã: ${sub.paymentDate?.toLocaleString('ru-RU') || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}`);
      console.log(`   ‚è∞ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: ${sub.expiresAt.toLocaleString('ru-RU')}`);
      console.log(`   ${status}`);
      console.log(`   üîë Transaction ID: ${sub.transactionId}`);
      console.log(`   üì± Telegram Charge ID: ${sub.telegramPaymentChargeId}`);
      console.log('-'.repeat(50));
    });

    // –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
    const activeSubscriptions = paidSubscriptions.filter(sub => 
      sub.isActive && sub.expiresAt > new Date()
    );

    console.log(`\nüéØ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ —Å–µ–π—á–∞—Å: ${activeSubscriptions.length}`);
    
    if (activeSubscriptions.length > 0) {
      console.log('\nüü¢ –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:');
      activeSubscriptions.forEach((sub, index) => {
        const daysLeft = Math.ceil((sub.expiresAt - new Date()) / (1000 * 60 * 60 * 24));
        console.log(`   ${index + 1}. User ${sub.userId} (${sub.type}) - –æ—Å—Ç–∞–ª–æ—Å—å ${daysLeft} –¥–Ω–µ–π`);
      });
    }

    // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const totalStars = paidSubscriptions.reduce((sum, sub) => sum + sub.stars, 0);
    console.log(`\nüí∞ –û–±—â–∏–π –¥–æ—Ö–æ–¥: ${totalStars} ‚≠ê Stars`);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  } finally {
    await mongoose.disconnect();
    console.log('\nüîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç MongoDB');
  }
}

checkSubscriptions(); 