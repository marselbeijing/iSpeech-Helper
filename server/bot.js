const TelegramBot = require('node-telegram-bot-api');
const express = require('express');
const mongoose = require('mongoose');
const Invoice = require('./models/Invoice');
const Subscription = require('./models/Subscription');
const Referral = require('./models/Referral');
const StarsBalance = require('./models/StarsBalance');
const TrialPeriod = require('./models/TrialPeriod');

class TelegramStarsBot {
  constructor(token) {
    console.log('ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TelegramStarsBot...');
    console.log('üîë –¢–æ–∫–µ–Ω –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω:', token ? '–î–∞' : '–ù–µ—Ç');
    
    if (!token) {
      console.error('‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω');
      throw new Error('TELEGRAM_BOT_TOKEN is required');
    }
    
    this.bot = new TelegramBot(token, { 
      polling: {
        interval: 1000,
        autoStart: true,
        params: {
          timeout: 10
        }
      }
    });
    
    console.log('‚úÖ TelegramBot —Å–æ–∑–¥–∞–Ω —Å polling');
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ polling - –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    this.bot.on('polling_error', (error) => {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —á–∞—Å—Ç—ã–µ —Å–µ—Ç–µ–≤—ã–µ –æ—à–∏–±–∫–∏
      if (error.code === 'EFATAL' || error.code === 'ENOTFOUND' || error.code === 'ETIMEDOUT') {
        return; // –ù–µ –ª–æ–≥–∏—Ä—É–µ–º —Å–µ—Ç–µ–≤—ã–µ –æ—à–∏–±–∫–∏
      }
      
      // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ Telegram bot:', error.code, error.message);
    });
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ webhook
    this.bot.on('webhook_error', (error) => {
      console.error('‚ùå Telegram webhook error:', error);
    });
    
    // –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    this.bot.getMe().then((botInfo) => {
      console.log('‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω:', botInfo.username);
    }).catch((error) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –±–æ—Ç–∞:', error.message);
    });
    
    this.setupWebhooks();
    console.log('üîß Webhook –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
    console.log('üöÄ TelegramStarsBot –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤
  getTexts(languageCode) {
    const isEnglish = languageCode === 'en' || (languageCode && languageCode.startsWith('en'));
    
    return {
      invoiceCreated: isEnglish ? 
        '‚ú® Invoice created! Click the "Pay" button above to pay.' :
        '‚ú® –ò–Ω–≤–æ–π—Å —Å–æ–∑–¥–∞–Ω! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ó–∞–ø–ª–∞—Ç–∏—Ç—å" –≤—ã—à–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã.',
      
      subscriptionMenu: `üí´ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É iSpeech Helper (–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º):

üî∏ 1 –º–µ—Å—è—Ü ‚Äî 299 ‚≠ê (30 –¥–Ω–µ–π –¥–æ—Å—Ç—É–ø–∞)
üî∏ 3 –º–µ—Å—è—Ü–∞ ‚Äî 699 ‚≠ê (‚àí20%)
üî∏ 12 –º–µ—Å—è—Ü–µ–≤ ‚Äî 1999 ‚≠ê (‚àí40%)

üí´ Choose your iSpeech Helper subscription (Full access to all features):
üî∏ 1 month ‚Äî 299 ‚≠ê (30 days access)
üî∏ 3 months ‚Äî 699 ‚≠ê (‚àí20%)
üî∏ 12 months ‚Äî 1999 ‚≠ê (‚àí40%)`,
      
      monthlyButton: 'üìÖ 1 month (299 ‚≠ê)',
      quarterlyButton: 'üìÖ 3 months (699 ‚≠ê)',
      yearlyButton: 'üìÖ 12 months (1999 ‚≠ê)',
      openAppButton: 'üöÄ Open App',
      
      buyButton: isEnglish ? 'Buy for' : '–ö—É–ø–∏—Ç—å –∑–∞',
      backButton: isEnglish ? 'üîô Back to selection' : 'üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É',
      
      monthlyTitle: `üí´ –ú–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ Premium 
üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: 299 ‚≠ê –∑–≤–µ–∑–¥ 
‚è∞ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 30 –¥–Ω–µ–π 
üìù –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –Ω–∞ 1 –º–µ—Å—è—Ü

üí´ Premium Monthly Subscription
üí∞ Price: 299 ‚≠ê stars
‚è∞ Duration: 30 days
üìù Full access to all features for 1 month`,
      quarterlyTitle: isEnglish ? 'Quarterly Premium Subscription' : '–ö–≤–∞—Ä—Ç–∞–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ Premium',
      yearlyTitle: isEnglish ? 'Annual Premium Subscription' : '–ì–æ–¥–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ Premium',
      
      duration30: isEnglish ? '30 days' : '30 –¥–Ω–µ–π',
      duration90: isEnglish ? '90 days' : '90 –¥–Ω–µ–π', 
      duration365: isEnglish ? '365 days' : '365 –¥–Ω–µ–π',
      
      description1: isEnglish ? 'Full access to all features for 1 month' : '–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –Ω–∞ 1 –º–µ—Å—è—Ü',
      description3: isEnglish ? 'Full access to all features for 3 months (20% discount)' : '–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –Ω–∞ 3 –º–µ—Å—è—Ü–∞ (—Å–∫–∏–¥–∫–∞ 20%)',
      description12: isEnglish ? 'Full access to all features for 1 year (40% discount)' : '–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –Ω–∞ 1 –≥–æ–¥ (—Å–∫–∏–¥–∫–∞ 40%)',
      
      cost: isEnglish ? 'Cost:' : '–°—Ç–æ–∏–º–æ—Å—Ç—å:',
      duration: isEnglish ? 'Duration:' : '–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:',
      stars: isEnglish ? 'stars' : '–∑–≤–µ–∑–¥',
      clickToPay: isEnglish ? 'Click the button below to pay:' : '–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:',
      
      // –°–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ
      paymentSuccess: isEnglish ? '‚úÖ Payment processed successfully!' : '‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!',
      subscriptionActivated: isEnglish ? 'üéâ Your subscription has been activated!' : 'üéâ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!',
      validUntil: isEnglish ? '‚è∞ Valid until:' : '‚è∞ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:',
      starsSpent: isEnglish ? '‚≠ê Stars spent:' : '‚≠ê –ü–æ—Ç—Ä–∞—á–µ–Ω–æ Stars:',
      allFeaturesAvailable: isEnglish ? 'All app features are now available to you!' : '–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è!',
      
      monthly: isEnglish ? 'monthly' : '–º–µ—Å—è—á–Ω–∞—è',
      quarterly: isEnglish ? 'quarterly' : '–∫–≤–∞—Ä—Ç–∞–ª—å–Ω–∞—è',
      yearly: isEnglish ? 'annual' : '–≥–æ–¥–æ–≤–∞—è',
      
      invoiceNotFound: isEnglish ? '‚ùå Error: invoice not found. Please contact support.' : '‚ùå –û—à–∏–±–∫–∞: –∏–Ω–≤–æ–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.',
      
      // –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
      newReferralTitle: isEnglish ? 'üéâ You have a new referral!' : 'üéâ –£ –≤–∞—Å –Ω–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª!',
      newReferralText: isEnglish ? 'A user joined using your link. When they purchase a subscription, you will receive a bonus in stars!' : '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ. –ö–æ–≥–¥–∞ –æ–Ω –∫—É–ø–∏—Ç –ø–æ–¥–ø–∏—Å–∫—É, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –±–æ–Ω—É—Å –≤ –∑–≤–µ–∑–¥–∞—Ö!',
      bonusesForSubs: isEnglish ? '‚≠ê Bonuses for subscriptions:' : '‚≠ê –ë–æ–Ω—É—Å—ã –∑–∞ –ø–æ–¥–ø–∏—Å–∫–∏:',
      monthlyBonus: isEnglish ? '‚Ä¢ Monthly: 60 ‚≠ê (20% of 299)' : '‚Ä¢ –ú–µ—Å—è—á–Ω–∞—è: 60 ‚≠ê (20% –æ—Ç 299)',
      quarterlyBonus: isEnglish ? '‚Ä¢ Quarterly: 140 ‚≠ê (20% of 699)' : '‚Ä¢ –ö–≤–∞—Ä—Ç–∞–ª—å–Ω–∞—è: 140 ‚≠ê (20% –æ—Ç 699)',
      yearlyBonus: isEnglish ? '‚Ä¢ Annual: 400 ‚≠ê (20% of 1999)' : '‚Ä¢ –ì–æ–¥–æ–≤–∞—è: 400 ‚≠ê (20% –æ—Ç 1999)',
      
      congratsBonus: isEnglish ? 'üéâ Congratulations! You received a bonus!' : 'üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ª—É—á–∏–ª–∏ –±–æ–Ω—É—Å!',
      referralBought: isEnglish ? 'Your referral bought a' : '–í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª –∫—É–ø–∏–ª',
      youReceived: isEnglish ? 'You received:' : '–í—ã –ø–æ–ª—É—á–∏–ª–∏:',
      currentBalanceCheck: isEnglish ? 'üí∞ You can check your current balance in the app in the "Referral Program" section.' : 'üí∞ –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ "–ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞".',
      
      subscriptionNames: {
        monthly: isEnglish ? 'monthly' : '–º–µ—Å—è—á–Ω—É—é',
        quarterly: isEnglish ? 'quarterly' : '–∫–≤–∞—Ä—Ç–∞–ª—å–Ω—É—é', 
        yearly: isEnglish ? 'annual' : '–≥–æ–¥–æ–≤—É—é'
      },
      welcomeMessage: `üó£ –Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ä–µ—á–∏ –∏ –¥–∏–∫—Ü–∏–∏. –ó–¥–µ—Å—å –≤–∞—Å –∂–¥—É—Ç —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è:

‚ú® –ß–µ—Ç–∫–æ–π –∞—Ä—Ç–∏–∫—É–ª—è—Ü–∏–∏
ü´Å –ü—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –¥—ã—Ö–∞–Ω–∏—è –∏ –≥–æ–ª–æ—Å–∞
üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ–π –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏
üé≠ –í—ã—Ä–∞–∑–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ä–µ—á–∏
üéÅ –ü–æ–ª—É—á–∏—Ç–µ 3 –¥–Ω—è –ë–ï–°–ü–õ–ê–¢–ù–û–ì–û –¥–æ—Å—Ç—É–ø–∞ –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º!

üó£ I'm your personal assistant for improving speech and diction. Here you'll find exercises for:

‚ú® Clear articulation
ü´Å Proper breathing and voice control
üéØ Confident communication
üé≠ Expressive speech
üéÅ Enjoy a 3-day FREE trial with full access to all features!`,
      learnAboutSubscriptionButton: 'üí´ Learn about subscription',
    };
  }

  setupWebhooks() {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ pre_checkout_query
    this.bot.on('pre_checkout_query', async (query) => {
      try {
        await this.handlePreCheckoutQuery(query);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ pre_checkout_query:', error);
        await this.bot.answerPreCheckoutQuery(query.id, false, {
          error_message: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞'
        });
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
    this.bot.on('message', async (msg) => {
      if (msg.successful_payment) {
        try {
          await this.handleSuccessfulPayment(msg);
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ successful_payment:', error);
        }
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback_query (inline –∫–Ω–æ–ø–∫–∏)
    this.bot.on('callback_query', async (query) => {
      try {
        await this.handleCallbackQuery(query);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback_query:', error);
        await this.bot.answerCallbackQuery(query.id, {
          text: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
          show_alert: true
        });
      }
    });

    // –ö–æ–º–∞–Ω–¥–∞ /start
    this.bot.onText(/\/start/, async (msg) => {
      const chatId = msg.chat.id;
      console.log('üì® –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', msg.from.id, '–≤ —á–∞—Ç–µ:', chatId);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä start
      const startParam = msg.text.split(' ')[1];
      console.log('üîç –ü–∞—Ä–∞–º–µ—Ç—Ä start:', startParam);
      
      if (startParam && startParam.startsWith('buy_')) {
        // –ï—Å–ª–∏ –ø—Ä–∏—à–ª–∏ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º –ø–æ–∫—É–ø–∫–∏, —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
        const planType = startParam.replace('buy_', '');
        console.log('üí≥ –ü—Ä—è–º–∞—è –ø–æ–∫—É–ø–∫–∞:', planType);
        await this.sendSubscriptionOffer(chatId, planType, msg.from);
        return;
      }
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
      if (startParam && startParam.startsWith('ref_')) {
        const referrerId = startParam.replace('ref_', '');
        console.log('üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –æ—Ç:', referrerId);
        await this.handleReferral(chatId, msg.from.id, referrerId);
      }

      // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      try {
        let trialPeriod = await TrialPeriod.findOne({ userId: msg.from.id.toString() });
        
        if (!trialPeriod) {
          // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥
          const startDate = new Date();
          trialPeriod = new TrialPeriod({
            userId: msg.from.id.toString(),
            startDate: startDate,
            endDate: new Date(startDate.getTime() + (3 * 24 * 60 * 60 * 1000)), // 3 –¥–Ω—è
            userInfo: {
              firstName: msg.from.first_name,
              lastName: msg.from.last_name,
              username: msg.from.username,
              languageCode: msg.from.language_code
            }
          });
          await trialPeriod.save();
          console.log('‚úÖ –°–æ–∑–¥–∞–Ω –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', msg.from.id, '–¥–æ:', trialPeriod.endDate);
        } else {
          console.log('‚ÑπÔ∏è –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', msg.from.id);
        }
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞:', error);
      }
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const texts = this.getTexts(msg.from.language_code);
      console.log('DEBUG BUTTONS:', texts.openAppButton, texts.learnAboutSubscriptionButton);
      console.log('DEBUG LANGUAGE:', msg.from.language_code);
      await this.bot.sendMessage(chatId, texts.welcomeMessage, {
        reply_markup: {
          inline_keyboard: [
            [{
              text: texts.openAppButton,
              web_app: { url: process.env.WEBAPP_URL || 'https://i-speech-helper-uce4.vercel.app/' }
            }],
            [{
              text: texts.learnAboutSubscriptionButton,
              callback_data: 'subscription_menu'
            }]
          ]
        }
      });
    });

    // –ö–æ–º–∞–Ω–¥–∞ /paysupport - –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –¥–ª—è –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö –±–æ—Ç–æ–≤
    this.bot.onText(/\/paysupport/, async (msg) => {
      const chatId = msg.chat.id;
      const supportMessage = `
üõ† –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–æ –ø–ª–∞—Ç–µ–∂–∞–º

–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º, —Å–≤—è–∑–∞–Ω–Ω—ã–º —Å –ø–ª–∞—Ç–µ–∂–∞–º–∏ –∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å:
üìß Email: support@ispeechhelper.com
üí¨ Telegram: @ispeechhelper_support

–ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.

‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –ü–æ–¥–¥–µ—Ä–∂–∫–∞ Telegram –Ω–µ —Å–º–æ–∂–µ—Ç –ø–æ–º–æ—á—å —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –ø–æ –ø–ª–∞—Ç–µ–∂–∞–º –≤ —ç—Ç–æ–º –±–æ—Ç–µ.
      `;

      await this.bot.sendMessage(chatId, supportMessage);
    });

    // –ö–æ–º–∞–Ω–¥—ã –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫
    this.bot.onText(/\/buy_monthly/, async (msg) => {
      await this.sendSubscriptionOffer(msg.chat.id, 'monthly', msg.from);
    });

    this.bot.onText(/\/buy_quarterly/, async (msg) => {
      await this.sendSubscriptionOffer(msg.chat.id, 'quarterly', msg.from);
    });

    this.bot.onText(/\/buy_yearly/, async (msg) => {
      await this.sendSubscriptionOffer(msg.chat.id, 'yearly', msg.from);
    });

    // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    this.bot.onText(/\/subscribe/, async (msg) => {
      const lang = msg.from.language_code || 'ru';
      await this.sendSubscriptionMenu(msg.chat.id, lang);
    });
  }

  async handlePreCheckoutQuery(query) {
    const { id, from, currency, total_amount, invoice_payload } = query;

    console.log('Pre-checkout query received:', {
      queryId: id,
      userId: from.id,
      amount: total_amount,
      payload: invoice_payload
    });

    // –ù–∞—Ö–æ–¥–∏–º –∏–Ω–≤–æ–π—Å –ø–æ payload
    const invoice = await Invoice.findOne({ 
      payload: invoice_payload,
      status: 'created'
    });

    if (!invoice) {
      console.log('Invoice not found for payload:', invoice_payload);
      await this.bot.answerPreCheckoutQuery(id, false, {
        error_message: '–ò–Ω–≤–æ–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ–ø–ª–∞—á–µ–Ω. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π.'
      });
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—É–º–º—ã
    if (total_amount !== invoice.stars) {
      console.log('Amount mismatch:', { expected: invoice.stars, received: total_amount });
      await this.bot.answerPreCheckoutQuery(id, false, {
        error_message: '–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞'
      });
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ –∏–Ω–≤–æ–π—Å
    if (new Date() > invoice.expiresAt) {
      console.log('Invoice expired:', invoice.expiresAt);
      await this.bot.answerPreCheckoutQuery(id, false, {
        error_message: '–ò–Ω–≤–æ–π—Å –∏—Å—Ç–µ–∫. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π.'
      });
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (invoice.userId !== from.id.toString()) {
      console.log('User ID mismatch:', { expected: invoice.userId, received: from.id });
      await this.bot.answerPreCheckoutQuery(id, false, {
        error_message: '–≠—Ç–æ—Ç –∏–Ω–≤–æ–π—Å —Å–æ–∑–¥–∞–Ω –¥–ª—è –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
      });
      return;
    }

    // –û–¥–æ–±—Ä—è–µ–º –ø–ª–∞—Ç–µ–∂
    console.log('Pre-checkout approved for:', invoice_payload);
    await this.bot.answerPreCheckoutQuery(id, true);
  }

  async handleSuccessfulPayment(msg) {
    const { successful_payment, from, chat } = msg;
    const { 
      currency, 
      total_amount, 
      invoice_payload, 
      telegram_payment_charge_id 
    } = successful_payment;

    console.log('Successful payment received:', {
      userId: from.id,
      amount: total_amount,
      payload: invoice_payload,
      chargeId: telegram_payment_charge_id
    });

    // –ù–∞—Ö–æ–¥–∏–º –∏–Ω–≤–æ–π—Å
    const invoice = await Invoice.findOne({ 
      payload: invoice_payload 
    });

    if (!invoice) {
      console.error('Invoice not found for successful payment:', invoice_payload);
      const texts = this.getTexts(from.language_code);
      await this.bot.sendMessage(chat.id, texts.invoiceNotFound);
      return;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏–Ω–≤–æ–π—Å–∞
    invoice.status = 'paid';
    invoice.paidAt = new Date();
    invoice.telegramPaymentChargeId = telegram_payment_charge_id;
    await invoice.save();

    // –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    const SUBSCRIPTION_CONFIG = {
      monthly: { duration: 30 },
      quarterly: { duration: 90 },
      yearly: { duration: 365 },
    };

    const config = SUBSCRIPTION_CONFIG[invoice.subscriptionType];
    const expiresAt = new Date();
    expiresAt.setDate(expiresAt.getDate() + config.duration);

    // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await Subscription.updateMany(
      { userId: invoice.userId, isActive: true },
      { isActive: false }
    );

    const subscription = new Subscription({
      userId: invoice.userId,
      type: invoice.subscriptionType,
      stars: invoice.stars,
      transactionId: invoice._id.toString(),
      telegramPaymentChargeId: telegram_payment_charge_id,
      invoicePayload: invoice_payload,
      expiresAt,
      status: 'paid',
      isActive: true,
    });

    await subscription.save();

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const texts = this.getTexts(from.language_code);
    
    const subscriptionName = texts[invoice.subscriptionType]; // monthly, quarterly, yearly

    const confirmationMessage = `
${texts.paymentSuccess}

üéâ ${texts.subscriptionActivated.replace('Your', `Your ${subscriptionName}`).replace('–í–∞—à–∞', `–í–∞—à–∞ ${subscriptionName}`)}
${texts.validUntil} ${expiresAt.toLocaleDateString('ru-RU')}
${texts.starsSpent} ${total_amount}

${texts.allFeaturesAvailable}
    `;

    await this.bot.sendMessage(chat.id, confirmationMessage, {
      reply_markup: {
        inline_keyboard: [
          [{
            text: texts.openAppButton,
            web_app: { url: process.env.WEBAPP_URL || 'https://i-speech-helper-uce4.vercel.app/' }
          }]
        ]
      }
    });

    console.log('Subscription created successfully:', {
      userId: invoice.userId,
      type: invoice.subscriptionType,
      expiresAt
    });

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É
    await this.processReferralReward(invoice.subscriptionType, invoice.userId);
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞)
  async setWebhook(webhookUrl) {
    try {
      await this.bot.setWebHook(`${webhookUrl}/api/telegram/webhook`);
      console.log('Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', `${webhookUrl}/api/telegram/webhook`);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook:', error);
    }
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook –∑–∞–ø—Ä–æ—Å–æ–≤
  processUpdate(update) {
    this.bot.processUpdate(update);
  }

  async handleCallbackQuery(query) {
    const { id, data, from, message } = query;
    const chatId = message.chat.id;

    console.log('üîò Callback query –ø–æ–ª—É—á–µ–Ω:', { 
      data, 
      userId: from.id, 
      chatId,
      messageId: message.message_id 
    });

    try {
      // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
      await this.bot.answerCallbackQuery(id);
      console.log('‚úÖ Callback query –æ—Ç–≤–µ—á–µ–Ω');

      if (data === 'subscription_menu') {
        console.log('üìã –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –ø–æ–¥–ø–∏—Å–æ–∫');
        await this.sendSubscriptionMenu(chatId, from.language_code);
      } else if (data.startsWith('buy_')) {
        const planType = data.replace('buy_', '');
        console.log('üí∞ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏:', planType);
        await this.sendSubscriptionOffer(chatId, planType, from);
      } else if (data.startsWith('pay_')) {
        const planType = data.replace('pay_', '');
        console.log('üí≥ –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å –¥–ª—è:', planType);
        await this.createInvoice(chatId, planType, from);
      } else {
        console.log('‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback data:', data);
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ handleCallbackQuery:', error);
      await this.bot.answerCallbackQuery(id, {
        text: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
        show_alert: true
      });
    }
  }

  async createInvoice(chatId, planType, user) {
    try {
      // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å Invoice –Ω–∞–ø—Ä—è–º—É—é –≤–º–µ—Å—Ç–æ HTTP –∑–∞–ø—Ä–æ—Å–∞
      const Invoice = require('./models/Invoice');
      
      const texts = this.getTexts(user.language_code);
      
      const PLANS = {
        monthly: { title: texts.monthlyTitle, amount: 299 },
        quarterly: { title: texts.quarterlyTitle, amount: 699 },
        yearly: { title: texts.yearlyTitle, amount: 1999 }
      };

      const plan = PLANS[planType];
      if (!plan) {
        throw new Error('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏');
      }

      // –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å –Ω–∞–ø—Ä—è–º—É—é
      const payload = `invoice_${Date.now()}_${user.id}_${planType}`;
      const expiresAt = new Date();
      expiresAt.setMinutes(expiresAt.getMinutes() + 30); // 30 –º–∏–Ω—É—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É

      const invoice = new Invoice({
        userId: user.id.toString(),
        subscriptionType: planType,
        stars: plan.amount,
        title: plan.title,
        description: `–ü–æ–¥–ø–∏—Å–∫–∞ iSpeech Helper - ${plan.title}`,
        payload: payload,
        status: 'created',
        expiresAt: expiresAt,
        userInfo: {
          firstName: user.first_name,
          lastName: user.last_name,
          username: user.username
        }
      });

      await invoice.save();
      console.log('–ò–Ω–≤–æ–π—Å —Å–æ–∑–¥–∞–Ω:', { payload, userId: user.id, planType });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–≤–æ–π—Å —á–µ—Ä–µ–∑ Telegram Bot API
      await this.bot.sendInvoice(chatId, plan.title, `–ü–æ–¥–ø–∏—Å–∫–∞ iSpeech Helper - ${plan.title}`,
        payload,
        '', // provider_token –ø—É—Å—Ç–æ–π –¥–ª—è Stars
        'XTR', // Stars
        [{ label: plan.title, amount: plan.amount }]
      );

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –æ–±—ä—è–≤–ª–µ–Ω–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é texts
      await this.bot.sendMessage(chatId, texts.invoiceCreated);
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–æ–π—Å–∞:', error);
      const isEnglish = user.language_code && user.language_code.startsWith('en');
      const errorMessage = isEnglish ? 
        '‚ùå Failed to create invoice. Please try again later or contact support.' :
        '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–Ω–≤–æ–π—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.';
      await this.bot.sendMessage(chatId, errorMessage);
    }
  }

  async sendSubscriptionMenu(chatId, languageCode = 'ru') {
    const texts = this.getTexts(languageCode);

    await this.bot.sendMessage(chatId, texts.subscriptionMenu, {
      reply_markup: {
        inline_keyboard: [
          [{
            text: texts.monthlyButton,
            callback_data: 'buy_monthly'
          }],
          [{
            text: texts.quarterlyButton,
            callback_data: 'buy_quarterly'
          }],
          [{
            text: texts.yearlyButton,
            callback_data: 'buy_yearly'
          }],
          [{
            text: texts.openAppButton,
            web_app: { url: process.env.WEBAPP_URL || 'https://i-speech-helper-uce4.vercel.app/' }
          }]
        ]
      }
    });
  }

  async sendSubscriptionOffer(chatId, planType, user) {
    const texts = this.getTexts(user.language_code);
    
    const PLANS = {
      monthly: {
        title: texts.monthlyTitle,
        amount: 299,
        duration: texts.duration30,
        description: texts.description1
      },
      quarterly: {
        title: texts.quarterlyTitle,
        amount: 699,
        duration: texts.duration90,
        description: texts.description3
      },
      yearly: {
        title: texts.yearlyTitle,
        amount: 1999,
        duration: texts.duration365,
        description: texts.description12
      }
    };

    const plan = PLANS[planType];
    if (!plan) {
      const isEnglish = user.language_code && user.language_code.startsWith('en');
      const errorText = isEnglish ? 
        '‚ùå Unknown subscription type' : '‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏';
      await this.bot.sendMessage(chatId, errorText);
      return;
    }

    const offerMessage = `
üí´ ${plan.title}

üí∞ ${texts.cost} ${plan.amount} ‚≠ê ${texts.stars}
‚è∞ ${texts.duration} ${plan.duration}
üìù ${plan.description}

${texts.clickToPay}
    `;

    await this.bot.sendMessage(chatId, offerMessage, {
      reply_markup: {
        inline_keyboard: [
          [{
            text: `üí≥ ${texts.buyButton} ${plan.amount} ‚≠ê`,
            callback_data: `pay_${planType}`
          }],
          [{
            text: texts.backButton,
            callback_data: 'subscription_menu'
          }]
        ]
      }
    });
  }

  // –ú–µ—Ç–æ–¥—ã —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
  async handleReferral(chatId, refereeId, referrerId) {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—ã—Ç–∞–µ—Ç—Å—è –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å —Å–µ–±—è
      if (refereeId.toString() === referrerId.toString()) {
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ —É–∂–µ —Å–æ–∑–¥–∞–Ω —Ä–µ—Ñ–µ—Ä–∞–ª
      const existingReferral = await Referral.findOne({
        referrerId: referrerId.toString(),
        refereeId: refereeId.toString()
      });

      if (existingReferral) {
        return; // –†–µ—Ñ–µ—Ä–∞–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      }

      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª
      const referral = new Referral({
        referrerId: referrerId.toString(),
        refereeId: refereeId.toString(),
        status: 'pending'
      });

      await referral.save();
      console.log('–†–µ—Ñ–µ—Ä–∞–ª —Å–æ–∑–¥–∞–Ω:', { referrerId, refereeId });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–µ—Ä—É
      try {
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—Ñ–µ—Ä–µ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è–∑—ã–∫–∞
        const referrer = await this.bot.getChat(referrerId);
        const referrerLang = referrer.language_code || 'ru';
        const texts = this.getTexts(referrerLang);

        const message = `
${texts.newReferralTitle}

${texts.newReferralText}

${texts.bonusesForSubs}
${texts.monthlyBonus}
${texts.quarterlyBonus}
${texts.yearlyBonus}
        `;

        await this.bot.sendMessage(referrerId, message);
      } catch (error) {
        console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–µ—Ä—É:', error.message);
      }

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–∞:', error);
    }
  }

  async processReferralReward(subscriptionType, userId) {
    try {
      // –ù–∞—Ö–æ–¥–∏–º —Ä–µ—Ñ–µ—Ä–∞–ª, –≥–¥–µ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è —Ä–µ—Ñ–µ—Ä–∏
      const referral = await Referral.findOne({
        refereeId: userId.toString(),
        status: 'pending'
      });

      if (!referral) {
        return; // –†–µ—Ñ–µ—Ä–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
      }

      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞–≥—Ä–∞–¥—É (20% –æ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫–∏)
      const rewards = {
        monthly: 60,   // 20% –æ—Ç 299
        quarterly: 140, // 20% –æ—Ç 699
        yearly: 400    // 20% –æ—Ç 1999
      };

      const starsReward = rewards[subscriptionType];
      if (!starsReward) {
        return;
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª
      referral.status = 'rewarded';
      referral.subscriptionType = subscriptionType;
      referral.starsRewarded = starsReward;
      referral.activatedAt = new Date();
      referral.rewardedAt = new Date();
      await referral.save();

      // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
      await this.updateStarsBalance(referral.referrerId, starsReward);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–µ—Ä—É
      try {
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—Ñ–µ—Ä–µ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è–∑—ã–∫–∞
        const referrer = await this.bot.getChat(referral.referrerId);
        const referrerLang = referrer.language_code || 'ru';
        const texts = this.getTexts(referrerLang);

        const message = `
${texts.congratsBonus}

${texts.referralBought} ${texts.subscriptionNames[subscriptionType]} subscription.
${texts.youReceived} ${starsReward} ‚≠ê stars

${texts.currentBalanceCheck}
        `;

        await this.bot.sendMessage(referral.referrerId, message);
      } catch (error) {
        console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–≥—Ä–∞–¥–µ:', error.message);
      }

      console.log('–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∞:', {
        referrerId: referral.referrerId,
        refereeId: referral.refereeId,
        subscriptionType,
        starsReward
      });

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –Ω–∞–≥—Ä–∞–¥—ã:', error);
    }
  }

  async updateStarsBalance(userId, starsToAdd) {
    try {
      let balance = await StarsBalance.findOne({ userId: userId.toString() });
      
      if (!balance) {
        balance = new StarsBalance({
          userId: userId.toString(),
          balance: starsToAdd,
          totalEarned: starsToAdd,
          referralsCount: 1
        });
      } else {
        balance.balance += starsToAdd;
        balance.totalEarned += starsToAdd;
        balance.referralsCount += 1;
      }
      
      await balance.save();
      console.log('–ë–∞–ª–∞–Ω—Å –∑–≤–µ–∑–¥ –æ–±–Ω–æ–≤–ª–µ–Ω:', { userId, newBalance: balance.balance });
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –∑–≤–µ–∑–¥:', error);
    }
  }

  async getUserStarsBalance(userId) {
    try {
      const balance = await StarsBalance.findOne({ userId: userId.toString() });
      return balance ? balance.balance : 0;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –∑–≤–µ–∑–¥:', error);
      return 0;
    }
  }
}

module.exports = TelegramStarsBot; 