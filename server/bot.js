const TelegramBot = require('node-telegram-bot-api');
const express = require('express');
const Invoice = require('./models/Invoice');
const Subscription = require('./models/Subscription');

class TelegramStarsBot {
  constructor(token) {
    this.bot = new TelegramBot(token, { polling: true });
    this.setupWebhooks();
    console.log('TelegramStarsBot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å —Ç–æ–∫–µ–Ω–æ–º:', token ? '–î–∞' : '–ù–µ—Ç');
  }

  setupWebhooks() {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ pre_checkout_query
    this.bot.on('pre_checkout_query', async (query) => {
      try {
        await this.handlePreCheckoutQuery(query);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ pre_checkout_query:', error);
        await this.bot.answerPreCheckoutQuery(query.id, false, {
          error_message: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞'
        });
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
    this.bot.on('message', async (msg) => {
      if (msg.successful_payment) {
        try {
          await this.handleSuccessfulPayment(msg);
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ successful_payment:', error);
        }
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback_query (inline –∫–Ω–æ–ø–∫–∏)
    this.bot.on('callback_query', async (query) => {
      try {
        await this.handleCallbackQuery(query);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback_query:', error);
        await this.bot.answerCallbackQuery(query.id, {
          text: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
          show_alert: true
        });
      }
    });

    // –ö–æ–º–∞–Ω–¥–∞ /start
    this.bot.onText(/\/start/, async (msg) => {
      const chatId = msg.chat.id;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä start
      const startParam = msg.text.split(' ')[1];
      
      if (startParam && startParam.startsWith('buy_')) {
        // –ï—Å–ª–∏ –ø—Ä–∏—à–ª–∏ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º –ø–æ–∫—É–ø–∫–∏, —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
        const planType = startParam.replace('buy_', '');
        await this.sendSubscriptionOffer(chatId, planType, msg.from);
        return;
      }
      
      const welcomeMessage = `
üëã –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ iSpeech Helper!

üó£ –Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ä–µ—á–∏ –∏ –¥–∏–∫—Ü–∏–∏. –ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥–µ—Ç–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è:

‚ú® –ß–µ—Ç–∫–æ–π –∞—Ä—Ç–∏–∫—É–ª—è—Ü–∏–∏ –∏ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è
ü´Å –ü—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –¥—ã—Ö–∞–Ω–∏—è –∏ –≥–æ–ª–æ—Å–∞  
üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ –æ–±—â–µ–Ω–∏–∏
üé≠ –í—ã—Ä–∞–∑–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ä–µ—á–∏

–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏? –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ!
      `;

      await this.bot.sendMessage(chatId, welcomeMessage, {
        reply_markup: {
          inline_keyboard: [
            [{
              text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
              web_app: { url: process.env.WEBAPP_URL || 'https://i-speech-helper-uce4.vercel.app/' }
            }],
            [{
              text: 'üí´ –£–∑–Ω–∞—Ç—å –æ –ø–æ–¥–ø–∏—Å–∫–µ',
              callback_data: 'subscription_menu'
            }]
          ]
        }
      });
    });

    // –ö–æ–º–∞–Ω–¥–∞ /paysupport - –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –¥–ª—è –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö –±–æ—Ç–æ–≤
    this.bot.onText(/\/paysupport/, async (msg) => {
      const chatId = msg.chat.id;
      const supportMessage = `
üõ† –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–æ –ø–ª–∞—Ç–µ–∂–∞–º

–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º, —Å–≤—è–∑–∞–Ω–Ω—ã–º —Å –ø–ª–∞—Ç–µ–∂–∞–º–∏ –∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å:
üìß Email: support@ispeechhelper.com
üí¨ Telegram: @ispeechhelper_support

–ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.

‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –ü–æ–¥–¥–µ—Ä–∂–∫–∞ Telegram –Ω–µ —Å–º–æ–∂–µ—Ç –ø–æ–º–æ—á—å —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –ø–æ –ø–ª–∞—Ç–µ–∂–∞–º –≤ —ç—Ç–æ–º –±–æ—Ç–µ.
      `;

      await this.bot.sendMessage(chatId, supportMessage);
    });

    // –ö–æ–º–∞–Ω–¥—ã –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫
    this.bot.onText(/\/buy_monthly/, async (msg) => {
      await this.sendSubscriptionOffer(msg.chat.id, 'monthly', msg.from);
    });

    this.bot.onText(/\/buy_quarterly/, async (msg) => {
      await this.sendSubscriptionOffer(msg.chat.id, 'quarterly', msg.from);
    });

    this.bot.onText(/\/buy_yearly/, async (msg) => {
      await this.sendSubscriptionOffer(msg.chat.id, 'yearly', msg.from);
    });

    // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    this.bot.onText(/\/subscribe/, async (msg) => {
      await this.sendSubscriptionMenu(msg.chat.id);
    });
  }

  async handlePreCheckoutQuery(query) {
    const { id, from, currency, total_amount, invoice_payload } = query;

    console.log('Pre-checkout query received:', {
      queryId: id,
      userId: from.id,
      amount: total_amount,
      payload: invoice_payload
    });

    // –ù–∞—Ö–æ–¥–∏–º –∏–Ω–≤–æ–π—Å –ø–æ payload
    const invoice = await Invoice.findOne({ 
      payload: invoice_payload,
      status: 'created'
    });

    if (!invoice) {
      console.log('Invoice not found for payload:', invoice_payload);
      await this.bot.answerPreCheckoutQuery(id, false, {
        error_message: '–ò–Ω–≤–æ–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ–ø–ª–∞—á–µ–Ω. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π.'
      });
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—É–º–º—ã
    if (total_amount !== invoice.stars) {
      console.log('Amount mismatch:', { expected: invoice.stars, received: total_amount });
      await this.bot.answerPreCheckoutQuery(id, false, {
        error_message: '–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞'
      });
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ –∏–Ω–≤–æ–π—Å
    if (new Date() > invoice.expiresAt) {
      console.log('Invoice expired:', invoice.expiresAt);
      await this.bot.answerPreCheckoutQuery(id, false, {
        error_message: '–ò–Ω–≤–æ–π—Å –∏—Å—Ç–µ–∫. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π.'
      });
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (invoice.userId !== from.id.toString()) {
      console.log('User ID mismatch:', { expected: invoice.userId, received: from.id });
      await this.bot.answerPreCheckoutQuery(id, false, {
        error_message: '–≠—Ç–æ—Ç –∏–Ω–≤–æ–π—Å —Å–æ–∑–¥–∞–Ω –¥–ª—è –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
      });
      return;
    }

    // –û–¥–æ–±—Ä—è–µ–º –ø–ª–∞—Ç–µ–∂
    console.log('Pre-checkout approved for:', invoice_payload);
    await this.bot.answerPreCheckoutQuery(id, true);
  }

  async handleSuccessfulPayment(msg) {
    const { successful_payment, from, chat } = msg;
    const { 
      currency, 
      total_amount, 
      invoice_payload, 
      telegram_payment_charge_id 
    } = successful_payment;

    console.log('Successful payment received:', {
      userId: from.id,
      amount: total_amount,
      payload: invoice_payload,
      chargeId: telegram_payment_charge_id
    });

    // –ù–∞—Ö–æ–¥–∏–º –∏–Ω–≤–æ–π—Å
    const invoice = await Invoice.findOne({ 
      payload: invoice_payload 
    });

    if (!invoice) {
      console.error('Invoice not found for successful payment:', invoice_payload);
      await this.bot.sendMessage(chat.id, 
        '‚ùå –û—à–∏–±–∫–∞: –∏–Ω–≤–æ–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.'
      );
      return;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏–Ω–≤–æ–π—Å–∞
    invoice.status = 'paid';
    invoice.paidAt = new Date();
    invoice.telegramPaymentChargeId = telegram_payment_charge_id;
    await invoice.save();

    // –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    const SUBSCRIPTION_CONFIG = {
      monthly: { duration: 30 },
      quarterly: { duration: 90 },
      yearly: { duration: 365 },
    };

    const config = SUBSCRIPTION_CONFIG[invoice.subscriptionType];
    const expiresAt = new Date();
    expiresAt.setDate(expiresAt.getDate() + config.duration);

    // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await Subscription.updateMany(
      { userId: invoice.userId, isActive: true },
      { isActive: false }
    );

    const subscription = new Subscription({
      userId: invoice.userId,
      type: invoice.subscriptionType,
      stars: invoice.stars,
      transactionId: invoice._id.toString(),
      telegramPaymentChargeId: telegram_payment_charge_id,
      invoicePayload: invoice_payload,
      expiresAt,
      status: 'paid',
      isActive: true,
    });

    await subscription.save();

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const subscriptionNames = {
      monthly: '–º–µ—Å—è—á–Ω–∞—è',
      quarterly: '–∫–≤–∞—Ä—Ç–∞–ª—å–Ω–∞—è', 
      yearly: '–≥–æ–¥–æ–≤–∞—è'
    };

    const confirmationMessage = `
‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!

üéâ –í–∞—à–∞ ${subscriptionNames[invoice.subscriptionType]} –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!
‚è∞ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: ${expiresAt.toLocaleDateString('ru-RU')}
‚≠ê –ü–æ—Ç—Ä–∞—á–µ–Ω–æ Stars: ${total_amount}

–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è!
    `;

    await this.bot.sendMessage(chat.id, confirmationMessage, {
      reply_markup: {
        inline_keyboard: [
          [{
            text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
            web_app: { url: process.env.WEBAPP_URL || 'https://i-speech-helper-uce4.vercel.app/' }
          }]
        ]
      }
    });

    console.log('Subscription created successfully:', {
      userId: invoice.userId,
      type: invoice.subscriptionType,
      expiresAt
    });
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞)
  async setWebhook(webhookUrl) {
    try {
      await this.bot.setWebHook(`${webhookUrl}/api/telegram/webhook`);
      console.log('Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', `${webhookUrl}/api/telegram/webhook`);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook:', error);
    }
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook –∑–∞–ø—Ä–æ—Å–æ–≤
  processUpdate(update) {
    this.bot.processUpdate(update);
  }

  async handleCallbackQuery(query) {
    const { id, data, from, message } = query;
    const chatId = message.chat.id;

    console.log('Callback query received:', { data, userId: from.id });

    // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
    await this.bot.answerCallbackQuery(id);

    if (data === 'subscription_menu') {
      await this.sendSubscriptionMenu(chatId);
    } else if (data.startsWith('buy_')) {
      const planType = data.replace('buy_', '');
      await this.sendSubscriptionOffer(chatId, planType, from);
    } else if (data.startsWith('pay_')) {
      const planType = data.replace('pay_', '');
      await this.createInvoice(chatId, planType, from);
    }
  }

  async createInvoice(chatId, planType, user) {
    try {
      // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å Invoice –Ω–∞–ø—Ä—è–º—É—é –≤–º–µ—Å—Ç–æ HTTP –∑–∞–ø—Ä–æ—Å–∞
      const Invoice = require('./models/Invoice');
      
      const PLANS = {
        monthly: { title: '–ú–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ Premium', amount: 299 },
        quarterly: { title: '–ö–≤–∞—Ä—Ç–∞–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ Premium', amount: 699 },
        yearly: { title: '–ì–æ–¥–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ Premium', amount: 1999 }
      };

      const plan = PLANS[planType];
      if (!plan) {
        throw new Error('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏');
      }

      // –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å –Ω–∞–ø—Ä—è–º—É—é
      const payload = `invoice_${Date.now()}_${user.id}_${planType}`;
      const expiresAt = new Date();
      expiresAt.setMinutes(expiresAt.getMinutes() + 30); // 30 –º–∏–Ω—É—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É

      const invoice = new Invoice({
        userId: user.id.toString(),
        subscriptionType: planType,
        stars: plan.amount,
        title: plan.title,
        description: `–ü–æ–¥–ø–∏—Å–∫–∞ iSpeech Helper - ${plan.title}`,
        payload: payload,
        status: 'created',
        expiresAt: expiresAt,
        userInfo: {
          firstName: user.first_name,
          lastName: user.last_name,
          username: user.username
        }
      });

      await invoice.save();
      console.log('–ò–Ω–≤–æ–π—Å —Å–æ–∑–¥–∞–Ω:', { payload, userId: user.id, planType });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–≤–æ–π—Å —á–µ—Ä–µ–∑ Telegram Bot API
      await this.bot.sendInvoice(chatId, plan.title, `–ü–æ–¥–ø–∏—Å–∫–∞ iSpeech Helper - ${plan.title}`,
        payload,
        '', // provider_token –ø—É—Å—Ç–æ–π –¥–ª—è Stars
        'XTR', // Stars
        [{ label: plan.title, amount: plan.amount }]
      );

      await this.bot.sendMessage(chatId, 
        '‚ú® –ò–Ω–≤–æ–π—Å —Å–æ–∑–¥–∞–Ω! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ó–∞–ø–ª–∞—Ç–∏—Ç—å" –≤—ã—à–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã.'
      );
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–æ–π—Å–∞:', error);
      await this.bot.sendMessage(chatId, 
        '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–Ω–≤–æ–π—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.'
      );
    }
  }

  async sendSubscriptionMenu(chatId) {
    const menuMessage = `
üí´ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É iSpeech Helper:

üî∏ –ú–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ - 299 ‚≠ê –∑–≤–µ–∑–¥
   –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –Ω–∞ 30 –¥–Ω–µ–π

üî∏ –ö–≤–∞—Ä—Ç–∞–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ - 699 ‚≠ê –∑–≤–µ–∑–¥  
   –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –Ω–∞ 90 –¥–Ω–µ–π (—Å–∫–∏–¥–∫–∞ 20%)

üî∏ –ì–æ–¥–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ - 1999 ‚≠ê –∑–≤–µ–∑–¥
   –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –Ω–∞ 365 –¥–Ω–µ–π (—Å–∫–∏–¥–∫–∞ 40%)

–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç:
    `;

    await this.bot.sendMessage(chatId, menuMessage, {
      reply_markup: {
        inline_keyboard: [
          [{
            text: 'üìÖ –ú–µ—Å—è—á–Ω–∞—è (299 ‚≠ê)',
            callback_data: 'buy_monthly'
          }],
          [{
            text: 'üìÖ –ö–≤–∞—Ä—Ç–∞–ª—å–Ω–∞—è (699 ‚≠ê)',
            callback_data: 'buy_quarterly'
          }],
          [{
            text: 'üìÖ –ì–æ–¥–æ–≤–∞—è (1999 ‚≠ê)',
            callback_data: 'buy_yearly'
          }],
          [{
            text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
            web_app: { url: process.env.WEBAPP_URL || 'https://i-speech-helper-uce4.vercel.app/' }
          }]
        ]
      }
    });
  }

  async sendSubscriptionOffer(chatId, planType, user) {
    const PLANS = {
      monthly: {
        title: '–ú–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ Premium',
        amount: 299,
        duration: '30 –¥–Ω–µ–π',
        description: '–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –Ω–∞ 1 –º–µ—Å—è—Ü'
      },
      quarterly: {
        title: '–ö–≤–∞—Ä—Ç–∞–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ Premium',
        amount: 699,
        duration: '90 –¥–Ω–µ–π',
        description: '–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –Ω–∞ 3 –º–µ—Å—è—Ü–∞ (—Å–∫–∏–¥–∫–∞ 20%)'
      },
      yearly: {
        title: '–ì–æ–¥–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ Premium',
        amount: 1999,
        duration: '365 –¥–Ω–µ–π',
        description: '–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –Ω–∞ 1 –≥–æ–¥ (—Å–∫–∏–¥–∫–∞ 40%)'
      }
    };

    const plan = PLANS[planType];
    if (!plan) {
      await this.bot.sendMessage(chatId, '‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏');
      return;
    }

    const offerMessage = `
üí´ ${plan.title}

üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${plan.amount} ‚≠ê –∑–≤–µ–∑–¥
‚è∞ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${plan.duration}
üìù ${plan.description}

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:
    `;

    await this.bot.sendMessage(chatId, offerMessage, {
      reply_markup: {
        inline_keyboard: [
          [{
            text: `üí≥ –ö—É–ø–∏—Ç—å –∑–∞ ${plan.amount} ‚≠ê`,
            callback_data: `pay_${planType}`
          }],
          [{
            text: 'üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É',
            callback_data: 'subscription_menu'
          }]
        ]
      }
    });
  }
}

module.exports = TelegramStarsBot; 