const mongoose = require('mongoose');

const trialPeriodSchema = new mongoose.Schema({
  userId: {
    type: String,
    required: true,
    unique: true,
    index: true
  },
  startDate: {
    type: Date,
    required: true,
    default: Date.now
  },
  endDate: {
    type: Date,
    required: true
  },
  isActive: {
    type: Boolean,
    default: true
  },
  hasSeenWelcome: {
    type: Boolean,
    default: false
  },
  userInfo: {
    firstName: String,
    lastName: String,
    username: String,
    languageCode: String
  }
}, {
  timestamps: true
});

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è (3 –¥–Ω—è –æ—Ç —Å—Ç–∞—Ä—Ç–∞)
trialPeriodSchema.pre('save', function(next) {
  if (this.isNew && !this.endDate) {
    // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ startDate —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
    if (!this.startDate) {
      this.startDate = new Date();
    }
    this.endDate = new Date(this.startDate.getTime() + (3 * 24 * 60 * 60 * 1000)); // 3 –¥–Ω—è
    console.log('üïí Auto-setting endDate:', this.endDate, 'for startDate:', this.startDate);
  }
  next();
});

// –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
trialPeriodSchema.methods.isTrialActive = function() {
  return this.isActive && new Date() < this.endDate;
};

// –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –≤—Ä–µ–º–µ–Ω–∏ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
trialPeriodSchema.methods.getTimeLeft = function() {
  const now = new Date();
  const timeLeft = this.endDate.getTime() - now.getTime();
  return Math.max(0, timeLeft);
};

// –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –≤—Ä–µ–º–µ–Ω–∏ –≤ —É–¥–æ–±–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
trialPeriodSchema.methods.getFormattedTimeLeft = function() {
  const timeLeft = this.getTimeLeft();
  if (timeLeft <= 0) return { days: 0, hours: 0, minutes: 0, seconds: 0 };
  
  const days = Math.floor(timeLeft / (24 * 60 * 60 * 1000));
  const hours = Math.floor((timeLeft % (24 * 60 * 60 * 1000)) / (60 * 60 * 1000));
  const minutes = Math.floor((timeLeft % (60 * 60 * 1000)) / (60 * 1000));
  const seconds = Math.floor((timeLeft % (60 * 1000)) / 1000);
  
  return { days, hours, minutes, seconds };
};

module.exports = mongoose.model('TrialPeriod', trialPeriodSchema); 