import { getCurrentUser } from './telegram';

// –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ –∑–≤–µ–∑–¥–∞–º–∏
export const getStarsBalance = async () => 0;
export const addReferralStars = async () => false;
export const useStars = async () => false;

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç–∏ –∑–≤–µ–∑–¥
export const hasEnoughStars = async (amount) => {
  const balance = await getStarsBalance();
  return balance >= amount;
};

// –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ –∑–≤–µ–∑–¥—ã
export const convertToStars = (amount) => {
  return Math.ceil(amount / 100); // –ü—Ä–∏–º–µ—Ä–Ω—ã–π –∫—É—Ä—Å: 1 –∑–≤–µ–∑–¥–∞ = 100 –µ–¥–∏–Ω–∏—Ü
};

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–æ–∫
const SUBSCRIPTION_PLANS = {
  MONTHLY: {
    id: 'monthly_premium',
    title: '–ú–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ Premium',
    description: '–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –Ω–∞ 1 –º–µ—Å—è—Ü',
    amount: 300, // stars
    duration: 30, // –¥–Ω–µ–π
  },
  QUARTERLY: {
    id: 'quarterly_premium', 
    title: '–ö–≤–∞—Ä—Ç–∞–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ Premium',
    description: '–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –Ω–∞ 3 –º–µ—Å—è—Ü–∞ (—Å–∫–∏–¥–∫–∞ 20%)',
    amount: 720, // stars
    duration: 90, // –¥–Ω–µ–π
  },
  YEARLY: {
    id: 'yearly_premium',
    title: '–ì–æ–¥–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ Premium', 
    description: '–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –Ω–∞ 1 –≥–æ–¥ (—Å–∫–∏–¥–∫–∞ 40%)',
    amount: 2160, // stars
    duration: 365, // –¥–Ω–µ–π
  },
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Telegram Stars
export const isStarsAvailable = () => {
  const webApp = window.Telegram?.WebApp;
  if (!webApp) return false;
  
  const hasUser = !!webApp.initDataUnsafe?.user;
  const hasOpenInvoice = typeof webApp.openInvoice === 'function';
  const hasVersion = webApp.isVersionAtLeast ? webApp.isVersionAtLeast('6.1') : true;
  
  console.log('Telegram WebApp platform:', webApp.platform);
  console.log('Has user:', hasUser);
  console.log('Version check:', hasVersion);
  console.log('Has openInvoice:', hasOpenInvoice);
  console.log('WebApp version:', webApp.version);
  
  return hasUser && hasVersion && hasOpenInvoice;
};

// –ò–Ω–∏—Ü–∏–∞—Ü–∏—è –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ Telegram Stars
export const purchaseWithStars = async (planType) => {
  try {
    console.log('–ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∫—É–ø–∫—É –¥–ª—è –ø–ª–∞–Ω–∞:', planType);
    
    const webApp = window.Telegram?.WebApp;
    if (!webApp) {
      throw new Error('Telegram WebApp –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
    }

    const user = getCurrentUser();
    if (!user) {
      throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
    }

    const plan = SUBSCRIPTION_PLANS[planType];
    if (!plan) {
      throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏');
    }

    console.log('–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã WebApp...');
    console.log('openInvoice:', typeof webApp.openInvoice);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ openInvoice –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ñ—É–Ω–∫—Ü–∏—è
    if (typeof webApp.openInvoice !== 'function') {
      const message = `üí≥ ${plan.title} - ${plan.amount} ‚≠ê –∑–≤–µ–∑–¥

–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–ª–∞—Ç–µ–∂–∏ Telegram Stars –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –≤ —ç—Ç–æ–π –≤–µ—Ä—Å–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.`;
      
      if (typeof webApp.showAlert === 'function') {
        return new Promise((resolve) => {
          webApp.showAlert(message, () => {
            resolve({
              success: false,
              cancelled: true,
              error: '–ü–ª–∞—Ç–µ–∂–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –≤ —ç—Ç–æ–π –≤–µ—Ä—Å–∏–∏ Telegram'
            });
          });
        });
      } else {
        return {
          success: false,
          cancelled: true,
          error: '–ü–ª–∞—Ç–µ–∂–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –≤ —ç—Ç–æ–π –≤–µ—Ä—Å–∏–∏ Telegram'
        };
      }
    }

    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–Ω–≤–æ–π—Å–∞ –¥–ª—è Telegram Stars
    const invoiceParams = {
      title: plan.title,
      description: plan.description,
      payload: JSON.stringify({
        userId: user.id,
        planType: planType,
        planId: plan.id,
        timestamp: Date.now(),
      }),
      provider_token: '',
      currency: 'XTR',
      prices: [{
        label: plan.title,
        amount: plan.amount
      }],
      need_name: false,
      need_phone_number: false,
      need_email: false,
      need_shipping_address: false,
      send_phone_number_to_provider: false,
      send_email_to_provider: false,
      is_flexible: false
    };

    console.log('–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–Ω–≤–æ–π—Å–∞:', invoiceParams);

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º Promise –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    return new Promise((resolve, reject) => {
      try {
        webApp.openInvoice(invoiceParams, (status) => {
          console.log('–°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞:', status);
          
          if (status === 'paid') {
            resolve({
              success: true,
              status: 'paid',
              plan: plan
            });
          } else if (status === 'cancelled') {
            resolve({
              success: false,
              cancelled: true,
              status: 'cancelled'
            });
          } else {
            resolve({
              success: false,
              status: status,
              error: '–ü–ª–∞—Ç–µ–∂ –Ω–µ —É–¥–∞–ª—Å—è'
            });
          }
        });
      } catch (invoiceError) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ openInvoice:', invoiceError);
        reject(new Error(`–û—à–∏–±–∫–∞ openInvoice: ${invoiceError.message}`));
      }
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ:', error);
    throw error;
  }
};

export { SUBSCRIPTION_PLANS };

const starsService = {
  isStarsAvailable,
  purchaseWithStars,
  SUBSCRIPTION_PLANS,
};

export default starsService; 