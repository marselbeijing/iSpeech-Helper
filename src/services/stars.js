import { getCurrentUser } from './telegram';

// –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ –∑–≤–µ–∑–¥–∞–º–∏
export const getStarsBalance = async () => 0;
export const addReferralStars = async () => false;
export const useStars = async () => false;

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç–∏ –∑–≤–µ–∑–¥
export const hasEnoughStars = async (amount) => {
  const balance = await getStarsBalance();
  return balance >= amount;
};

// –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ –∑–≤–µ–∑–¥—ã
export const convertToStars = (amount) => {
  return Math.ceil(amount / 100); // –ü—Ä–∏–º–µ—Ä–Ω—ã–π –∫—É—Ä—Å: 1 –∑–≤–µ–∑–¥–∞ = 100 –µ–¥–∏–Ω–∏—Ü
};

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–æ–∫
const SUBSCRIPTION_PLANS = {
  MONTHLY: {
    id: 'monthly_premium',
    title: '–ú–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ Premium',
    description: '–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –Ω–∞ 1 –º–µ—Å—è—Ü',
    amount: 300, // stars
    duration: 30, // –¥–Ω–µ–π
  },
  QUARTERLY: {
    id: 'quarterly_premium', 
    title: '–ö–≤–∞—Ä—Ç–∞–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ Premium',
    description: '–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –Ω–∞ 3 –º–µ—Å—è—Ü–∞ (—Å–∫–∏–¥–∫–∞ 20%)',
    amount: 720, // stars
    duration: 90, // –¥–Ω–µ–π
  },
  YEARLY: {
    id: 'yearly_premium',
    title: '–ì–æ–¥–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ Premium', 
    description: '–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –Ω–∞ 1 –≥–æ–¥ (—Å–∫–∏–¥–∫–∞ 40%)',
    amount: 2160, // stars
    duration: 365, // –¥–Ω–µ–π
  },
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Telegram Stars
export const isStarsAvailable = () => {
  const webApp = window.Telegram?.WebApp;
  if (!webApp) return false;
  
  const hasUser = !!webApp.initDataUnsafe?.user;
  const hasVersion = webApp.isVersionAtLeast ? webApp.isVersionAtLeast('6.1') : true;
  // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É openInvoice, —Ç–∞–∫ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥
  const hasTelegramLink = typeof webApp.openTelegramLink === 'function' || typeof webApp.openLink === 'function';
  
  console.log('Telegram WebApp platform:', webApp.platform);
  console.log('Has user:', hasUser);
  console.log('Version check:', hasVersion);
  console.log('Has openInvoice:', typeof webApp.openInvoice === 'function');
  console.log('Has openTelegramLink:', typeof webApp.openTelegramLink === 'function');
  console.log('WebApp version:', webApp.version);
  
  // Telegram Stars –¥–æ—Å—Ç—É–ø–Ω—ã –µ—Å–ª–∏ –µ—Å—Ç—å WebApp —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç—å —Å—Å—ã–ª–∫—É
  return hasUser && hasVersion && hasTelegramLink;
};

// –ò–Ω–∏—Ü–∏–∞—Ü–∏—è –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ Telegram Stars
export const purchaseWithStars = async (planType) => {
  try {
    console.log('–ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∫—É–ø–∫—É –¥–ª—è –ø–ª–∞–Ω–∞:', planType);
    
    const webApp = window.Telegram?.WebApp;
    if (!webApp) {
      throw new Error('Telegram WebApp –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
    }

    const user = getCurrentUser();
    if (!user) {
      throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
    }

    const plan = SUBSCRIPTION_PLANS[planType];
    if (!plan) {
      throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏');
    }

    console.log('–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã WebApp...');
    console.log('openInvoice:', typeof webApp.openInvoice);
    console.log('sendData:', typeof webApp.sendData);
    console.log('openTelegramLink:', typeof webApp.openTelegramLink);
    console.log('showPopup:', typeof webApp.showPopup);

    // –ü–æ—Å–∫–æ–ª—å–∫—É openInvoice —Å–æ–¥–µ—Ä–∂–∏—Ç –±–∞–≥, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥
    console.log('openInvoice —Å–æ–¥–µ—Ä–∂–∏—Ç –±–∞–≥ –≤ —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏ Telegram WebApp');
    console.log('–ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥ —á–µ—Ä–µ–∑ –±–æ—Ç–∞...');

    // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
    const message = `üí´ ${plan.title}

üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${plan.amount} ‚≠ê –∑–≤–µ–∑–¥
üìù ${plan.description}

ü§ñ –î–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ @iSpeechHelper_bot –∏ –Ω–∞–ø–∏—à–∏—Ç–µ:
/buy_${planType.toLowerCase()}

–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ /start –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–¥–ø–∏—Å–∫–∏.`;

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º popup —Å –≤—ã–±–æ—Ä–æ–º –¥–µ–π—Å—Ç–≤–∏–π
    if (typeof webApp.showPopup === 'function') {
      return new Promise((resolve) => {
        webApp.showPopup({
          title: 'üí≥ –ü–æ–∫—É–ø–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏',
          message: message,
          buttons: [
            {
              id: 'open_bot',
              type: 'default',
              text: 'ü§ñ –û—Ç–∫—Ä—ã—Ç—å –±–æ—Ç–∞'
            },
            {
              id: 'cancel',
              type: 'cancel',
              text: '–û—Ç–º–µ–Ω–∞'
            }
          ]
        }, (buttonId) => {
          console.log('–í—ã–±—Ä–∞–Ω–∞ –∫–Ω–æ–ø–∫–∞:', buttonId);
          
          if (buttonId === 'open_bot') {
            // –û—Ç–∫—Ä—ã–≤–∞–µ–º –±–æ—Ç–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏
            if (typeof webApp.openTelegramLink === 'function') {
              webApp.openTelegramLink('https://t.me/iSpeechHelper_bot?start=buy_' + planType.toLowerCase());
            } else if (typeof webApp.openLink === 'function') {
              webApp.openLink('https://t.me/iSpeechHelper_bot?start=buy_' + planType.toLowerCase());
            }
            
            resolve({
              success: false,
              cancelled: false,
              redirected: true,
              message: '–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –≤ –±–æ—Ç–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏'
            });
          } else {
            resolve({
              success: false,
              cancelled: true,
              status: 'cancelled'
            });
          }
        });
      });
    } 
    
    // Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π –±–µ–∑ showPopup
    else if (typeof webApp.showAlert === 'function') {
      return new Promise((resolve) => {
        webApp.showAlert(message, () => {
          // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –±–æ—Ç–∞
          if (typeof webApp.openTelegramLink === 'function') {
            webApp.openTelegramLink('https://t.me/iSpeechHelper_bot?start=buy_' + planType.toLowerCase());
          }
          
          resolve({
            success: false,
            cancelled: false,
            redirected: true,
            message: '–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –≤ –±–æ—Ç–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏'
          });
        });
      });
    } 
    
    // –ü–æ—Å–ª–µ–¥–Ω–∏–π fallback
    else {
      alert(message);
      
      // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–∫—Ä—ã—Ç—å —Å—Å—ã–ª–∫—É
      if (typeof webApp.openTelegramLink === 'function') {
        webApp.openTelegramLink('https://t.me/iSpeechHelper_bot?start=buy_' + planType.toLowerCase());
      } else if (typeof webApp.openLink === 'function') {
        webApp.openLink('https://t.me/iSpeechHelper_bot?start=buy_' + planType.toLowerCase());
      } else {
        window.open('https://t.me/iSpeechHelper_bot?start=buy_' + planType.toLowerCase(), '_blank');
      }
      
      return {
        success: false,
        cancelled: false,
        redirected: true,
        message: '–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –≤ –±–æ—Ç–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏'
      };
    }

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ:', error);
    throw error;
  }
};

export { SUBSCRIPTION_PLANS };

const starsService = {
  isStarsAvailable,
  purchaseWithStars,
  SUBSCRIPTION_PLANS,
};

export default starsService; 