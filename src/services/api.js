/**
 * API Service - Compatibility Layer
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º
 * –°–æ–∑–¥–∞–Ω: 2025-01-29 –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã –∏–º–ø–æ—Ä—Ç–∞ –Ω–∞ Vercel
 */

import { checkSubscriptionStatus } from './subscription';
import { getTrialStatus } from './trial';

console.log('üîå API Service –∑–∞–≥—Ä—É–∂–µ–Ω –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏');

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @returns {Promise<Object>} –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
 */
export const getUserSubscriptionStatus = async (userId) => {
  try {
    console.log('üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);
    const status = await checkSubscriptionStatus();
    
    const result = {
      hasActiveSubscription: status.isActive || false,
      trialActive: false, // –ü–æ–ª—É—á–∞–µ—Ç—Å—è –∏–∑ getTrialData
      trialExpired: false, // –ü–æ–ª—É—á–∞–µ—Ç—Å—è –∏–∑ getTrialData
      type: status.type || null,
      expiresAt: status.expiresAt || null
    };
    
    console.log('‚úÖ –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—É—á–µ–Ω:', result);
    return result;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏:', error);
    return {
      hasActiveSubscription: false,
      trialActive: false,
      trialExpired: true,
      type: null,
      expiresAt: null
    };
  }
};

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
 * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è  
 * @returns {Promise<Object>} –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
 */
export const getTrialData = async (userId) => {
  try {
    console.log('üìÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);
    const trialStatus = await getTrialStatus();
    
    console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –ø–æ–ª—É—á–µ–Ω—ã:', trialStatus);
    return trialStatus;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞:', error);
    return {
      hasActiveSubscription: false,
      trial: {
        isActive: false,
        hasSeenWelcome: true,
        startDate: new Date().toISOString(),
        endDate: new Date().toISOString(),
        timeLeft: { days: 0, hours: 0, minutes: 0 },
        timeLeftMs: 0
      }
    };
  }
};

// –≠–∫—Å–ø–æ—Ä—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –ø—Ä—è–º–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
export { checkSubscriptionStatus, getTrialStatus };

export default {
  getUserSubscriptionStatus,
  getTrialData,
  checkSubscriptionStatus,
  getTrialStatus
}; 