import telegramAnalytics from '@telegram-apps/analytics';

class TelegramAnalyticsTest {
  constructor() {
    this.isInitialized = false;
    this.eventQueue = [];
    console.log('üîç Analytics Test: –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω');
    this.init();
  }

  init() {
    console.log('üîç Analytics Test: –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é...');
    
    try {
      const analyticsToken = process.env.REACT_APP_TG_ANALYTICS_TOKEN;
      console.log('üîç Analytics Test: –¢–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω:', analyticsToken ? '–î–ê' : '–ù–ï–¢');
      console.log('üîç Analytics Test: –î–ª–∏–Ω–∞ —Ç–æ–∫–µ–Ω–∞:', analyticsToken?.length || 0);
      
      if (analyticsToken && analyticsToken !== 'undefined') {
        console.log('üîç Analytics Test: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram Analytics...');
        
        telegramAnalytics.init({
          token: analyticsToken,
          appName: 'ispeechhelper',
        });
        
        this.isInitialized = true;
        console.log('‚úÖ Analytics Test: Telegram Analytics —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã
        console.log('üîç Analytics Test: –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã telegramAnalytics:', Object.keys(telegramAnalytics));
        console.log('üîç Analytics Test: –ú–µ—Ç–æ–¥ track –¥–æ—Å—Ç—É–ø–µ–Ω:', typeof telegramAnalytics.track === 'function');
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—á–µ—Ä–µ–¥—å —Å–æ–±—ã—Ç–∏–π
        this.processEventQueue();
      } else {
        console.warn('‚ö†Ô∏è Analytics Test: –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—É—Å—Ç–æ–π');
      }
    } catch (error) {
      console.error('‚ùå Analytics Test: –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
    }
  }

  processEventQueue() {
    console.log('üîç Analytics Test: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—á–µ—Ä–µ–¥—å —Å–æ–±—ã—Ç–∏–π, —Ä–∞–∑–º–µ—Ä:', this.eventQueue.length);
    while (this.eventQueue.length > 0) {
      const event = this.eventQueue.shift();
      this.sendEvent(event.name, event.parameters);
    }
  }

  sendEvent(eventName, parameters = {}) {
    console.log('üîç Analytics Test: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ:', eventName, parameters);
    
    if (!this.isInitialized) {
      console.log('‚è≥ Analytics Test: SDK –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å');
      this.eventQueue.push({ name: eventName, parameters });
      return;
    }

    try {
      const eventData = {
        ...parameters,
        timestamp: Date.now(),
        user_agent: navigator.userAgent,
        platform: this.getPlatform(),
      };

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ Telegram Analytics
      if (telegramAnalytics && telegramAnalytics.track) {
        console.log('üì§ Analytics Test: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ telegramAnalytics.track');
        telegramAnalytics.track(eventName, eventData);
        console.log('‚úÖ Analytics Test: –°–æ–±—ã—Ç–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ SDK');
      } else {
        console.warn('‚ö†Ô∏è Analytics Test: telegramAnalytics.track –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
      }

      // –¢–∞–∫–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ WebApp API –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
      if (window.Telegram?.WebApp?.sendData) {
        console.log('üì§ Analytics Test: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ WebApp.sendData');
        window.Telegram.WebApp.sendData(JSON.stringify({
          event: eventName,
          parameters: eventData,
          timestamp: Date.now()
        }));
        console.log('‚úÖ Analytics Test: –°–æ–±—ã—Ç–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ WebApp API');
      } else {
        console.log('‚ÑπÔ∏è Analytics Test: WebApp.sendData –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
      }

    } catch (error) {
      console.error('‚ùå Analytics Test: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–±—ã—Ç–∏—è:', error);
    }
  }

  getPlatform() {
    if (window.Telegram?.WebApp?.platform) {
      return window.Telegram.WebApp.platform;
    }
    
    const userAgent = navigator.userAgent.toLowerCase();
    if (userAgent.includes('android')) return 'android';
    if (userAgent.includes('iphone') || userAgent.includes('ipad')) return 'ios';
    if (userAgent.includes('mac')) return 'macos';
    if (userAgent.includes('windows')) return 'windows';
    return 'web';
  }

  // –¢–µ—Å—Ç–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã
  trackAppStart() {
    console.log('üöÄ Analytics Test: trackAppStart –≤—ã–∑–≤–∞–Ω');
    this.sendEvent('app_start', {
      platform: this.getPlatform(),
      user_id: window.Telegram?.WebApp?.initDataUnsafe?.user?.id,
      language_code: window.Telegram?.WebApp?.initDataUnsafe?.user?.language_code || 'ru',
    });
  }

  trackPageView(pageName, additionalData = {}) {
    console.log('üìÑ Analytics Test: trackPageView –≤—ã–∑–≤–∞–Ω', pageName);
    this.sendEvent('page_view', {
      page_name: pageName,
      ...additionalData,
    });
  }

  trackUIInteraction(elementType, elementName, action, additionalData = {}) {
    console.log('üëÜ Analytics Test: trackUIInteraction –≤—ã–∑–≤–∞–Ω', elementType, elementName, action);
    this.sendEvent('ui_interaction', {
      element_type: elementType,
      element_name: elementName,
      action: action,
      ...additionalData,
    });
  }

  trackExerciseStart(exerciseType, settings = {}) {
    console.log('üèÉ Analytics Test: trackExerciseStart –≤—ã–∑–≤–∞–Ω', exerciseType);
    this.sendEvent('exercise_start', {
      exercise_type: exerciseType,
      settings: settings,
    });
  }

  trackExerciseComplete(exerciseType, duration, results = {}) {
    console.log('‚úÖ Analytics Test: trackExerciseComplete –≤—ã–∑–≤–∞–Ω', exerciseType);
    this.sendEvent('exercise_complete', {
      exercise_type: exerciseType,
      duration_seconds: duration,
      results: results,
    });
  }

  trackSettingsChange(settingName, oldValue, newValue) {
    console.log('‚öôÔ∏è Analytics Test: trackSettingsChange –≤—ã–∑–≤–∞–Ω', settingName);
    this.sendEvent('settings_change', {
      setting_name: settingName,
      old_value: oldValue,
      new_value: newValue,
    });
  }

  trackFeatureUsage(featureName, action, additionalData = {}) {
    console.log('üéØ Analytics Test: trackFeatureUsage –≤—ã–∑–≤–∞–Ω', featureName, action);
    this.sendEvent('feature_usage', {
      feature_name: featureName,
      action: action,
      ...additionalData,
    });
  }

  trackSubscriptionAction(action, planType = null, additionalData = {}) {
    console.log('üí≥ Analytics Test: trackSubscriptionAction –≤—ã–∑–≤–∞–Ω', action, planType);
    this.sendEvent('subscription_action', {
      action: action,
      plan_type: planType,
      ...additionalData,
    });
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  testAnalytics() {
    console.log('üß™ Analytics Test: –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    console.log('üîç –°–æ—Å—Ç–æ—è–Ω–∏–µ SDK:');
    console.log('  - isInitialized:', this.isInitialized);
    console.log('  - eventQueue length:', this.eventQueue.length);
    console.log('  - telegramAnalytics –¥–æ—Å—Ç—É–ø–µ–Ω:', !!telegramAnalytics);
    console.log('  - telegramAnalytics.track –¥–æ—Å—Ç—É–ø–µ–Ω:', typeof telegramAnalytics?.track === 'function');
    console.log('  - WebApp –¥–æ—Å—Ç—É–ø–µ–Ω:', !!window.Telegram?.WebApp);
    console.log('  - WebApp.sendData –¥–æ—Å—Ç—É–ø–µ–Ω:', typeof window.Telegram?.WebApp?.sendData === 'function');
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ
    this.sendEvent('test_event', {
      test_parameter: 'test_value',
      timestamp: Date.now(),
    });
    
    return {
      isInitialized: this.isInitialized,
      queueLength: this.eventQueue.length,
      sdkAvailable: !!telegramAnalytics,
      trackMethodAvailable: typeof telegramAnalytics?.track === 'function',
      webAppAvailable: !!window.Telegram?.WebApp,
      sendDataAvailable: typeof window.Telegram?.WebApp?.sendData === 'function',
    };
  }
}

// –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
const analyticsTestService = new TelegramAnalyticsTest();

// –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
window.testTelegramAnalytics = () => {
  return analyticsTestService.testAnalytics();
};

console.log('üîç Analytics Test: –°–µ—Ä–≤–∏—Å —Å–æ–∑–¥–∞–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω –∫–∞–∫ window.testTelegramAnalytics()');

export default analyticsTestService; 