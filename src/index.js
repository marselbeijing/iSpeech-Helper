import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';
import './index.css';
import i18n from './i18n';
import { I18nextProvider } from 'react-i18next';

// Analytics —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –≤ —Å–µ—Ä–≤–∏—Å–µ

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <I18nextProvider i18n={i18n}>
      <App />
    </I18nextProvider>
  </React.StrictMode>
);

// –ü–æ–¥–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –æ—à–∏–±–æ–∫
window.addEventListener('error', function(event) {
  const message = event.message || '';
  
  // –ü–æ–¥–∞–≤–ª—è–µ–º –æ—à–∏–±–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  if (
    message.includes('TIMEOUT') ||
    message.includes('TelegramClient') ||
    message.includes('_updateLoop') ||
    message.includes('Not connected') ||
    message.includes('Connection closed while receiving data') ||
    message.includes('–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∏—Å—Ç–µ–∫–ª–æ') ||
    message.includes('MetaMask extension not found') ||
    message.includes('Token is not provided') ||
    message.includes('ChromeTransport') ||
    message.includes('chrome runtime disconnected') ||
    message.includes('chrome.runtime') ||
    message.includes('Extension context invalidated')
  ) {
    event.preventDefault();
    return;
  }
});

// –ü–æ–¥–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö promise rejection'–æ–≤
window.addEventListener('unhandledrejection', function(event) {
  const message = event.reason?.message || event.reason || '';
  
  if (
    typeof message === 'string' && (
      message.includes('TIMEOUT') ||
      message.includes('TelegramClient') ||
      message.includes('Not connected') ||
      message.includes('Connection closed') ||
      message.includes('–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∏—Å—Ç–µ–∫–ª–æ')
    )
  ) {
    event.preventDefault();
    return;
  }
});

// –ü–æ–¥–∞–≤–ª–µ–Ω–∏–µ unhandled promise rejections
window.addEventListener('unhandledrejection', function(event) {
  const reason = event.reason?.message || event.reason || '';
  
  if (
    reason.includes('MetaMask') ||
    reason.includes('Token is not provided') ||
    reason.includes('ChromeTransport') ||
    reason.includes('chrome runtime disconnected') ||
    reason.includes('chrome.runtime') ||
    reason.includes('Extension context invalidated') ||
    reason.includes('TIMEOUT') ||
    reason.includes('TelegramClient') ||
    reason.includes('_updateLoop')
  ) {
    event.preventDefault();
    return;
  }
});

// === –§—É–Ω–∫—Ü–∏–∏ –æ—Ç–ª–∞–¥–∫–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ ===
window.checkModalState = function() {
  const lastShown = localStorage.getItem('trialExpiredModalLastShown');
  const snoozedUntil = localStorage.getItem('trialModalSnoozedUntil');
  
  const canShow = !lastShown || (Date.now() - parseInt(lastShown)) / (1000 * 60 * 60) >= 4;
  const isSnoozed = snoozedUntil && Date.now() < parseInt(snoozedUntil);
  
  const state = {
    lastModalShown: lastShown ? new Date(parseInt(lastShown)).toLocaleString() : '–ù–∏–∫–æ–≥–¥–∞',
    snoozedUntil: snoozedUntil ? new Date(parseInt(snoozedUntil)).toLocaleString() : '–ù–µ—Ç',
    canShowModal: canShow,
    isModalSnoozed: isSnoozed,
    hasTemporaryAccess: isSnoozed,
    currentTime: new Date().toLocaleString()
  };
  
  console.log('üîç –°–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞:');
  console.table(state);
  
  if (isSnoozed) {
    const timeLeft = parseInt(snoozedUntil) - Date.now();
    const hoursLeft = Math.ceil(timeLeft / (1000 * 60 * 60));
    console.log(`‚è∞ –í—Ä–µ–º–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–µ–Ω –µ—â—ë ${hoursLeft} —á–∞—Å–æ–≤`);
  }
  
  return state;
};

window.clearTrialCache = function() {
  console.log('üßπ –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞...');
  
  const keysToRemove = [
    'trialExpiredModalLastShown',
    'trialModalSnoozedUntil'
  ];
  
  keysToRemove.forEach(key => {
    localStorage.removeItem(key);
    console.log(`‚úÖ –£–¥–∞–ª–µ–Ω –∫–ª—é—á: ${key}`);
  });
  
  console.log('üéâ –ö—ç—à –æ—á–∏—â–µ–Ω! –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π.');
  return '–ö—ç—à –æ—á–∏—â–µ–Ω! –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.';
};

window.forceHideModal = function() {
  console.log('üîß –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞');
  
  const modals = document.querySelectorAll('[role="dialog"], .MuiModal-root');
  modals.forEach(modal => {
    if (modal.style.display !== 'none') {
      modal.style.display = 'none';
      console.log('üîí –°–∫—Ä—ã—Ç–æ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ:', modal);
    }
  });
  
  return '–í—Å–µ –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ —Å–∫—Ä—ã—Ç—ã –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ';
};

window.resetModalSettings = function() {
  window.clearTrialCache();
  console.log('üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É...');
  window.location.reload();
};

console.log('üõ†Ô∏è –§—É–Ω–∫—Ü–∏–∏ –æ—Ç–ª–∞–¥–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:');
console.log('- checkModalState() - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ');
console.log('- clearTrialCache() - –æ—á–∏—Å—Ç–∏—Ç—å –∫—ç—à');
console.log('- forceHideModal() - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞');
console.log('- resetModalSettings() - —Å–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å');
// === –ö–æ–Ω–µ—Ü —Ñ—É–Ω–∫—Ü–∏–π –æ—Ç–ª–∞–¥–∫–∏ ===