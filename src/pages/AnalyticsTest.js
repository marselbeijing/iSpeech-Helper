import React, { useState, useEffect } from 'react';
import { 
  Box, 
  Typography, 
  Button, 
  Card, 
  CardContent, 
  Chip,
  Alert,
  Stack
} from '@mui/material';
import { CheckCircle, Error } from '@mui/icons-material';
import usePremiumAccess from '../hooks/usePremiumAccess';
import TrialWelcomeModal from '../components/TrialWelcomeModal';
import { useNavigate } from 'react-router-dom';
import { getTrialTexts } from '../services/trial';

const AnalyticsTest = () => {
  const [analyticsStatus, setAnalyticsStatus] = useState({
    sdkLoaded: false,
    initialized: false,
    telegramWebApp: false,
    errors: []
  });
  const { blocked, loading, trialData, checkAccess } = usePremiumAccess();
  const [showModal, setShowModal] = React.useState(false);
  const navigate = useNavigate();

  useEffect(() => {
    checkAnalyticsStatus();
  }, []);

  React.useEffect(() => {
    if (!loading && blocked) {
      setShowModal(true);
    }
  }, [loading, blocked]);

  const checkAnalyticsStatus = () => {
    const status = {
      sdkLoaded: false,
      initialized: false,
      telegramWebApp: false,
      errors: []
    };

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ SDK
    if (typeof window.telegramAnalytics !== 'undefined' || typeof telegramAnalytics !== 'undefined') {
      status.sdkLoaded = true;
    } else {
      status.errors.push('SDK –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram WebApp
    if (window.Telegram && window.Telegram.WebApp) {
      status.telegramWebApp = true;
    } else {
      status.errors.push('Telegram WebApp –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
    }

    setAnalyticsStatus(status);
  };

  const runAnalyticsTest = () => {
    console.log('üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏...');
    
    // –í—ã–∑—ã–≤–∞–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    if (window.checkTelegramAnalytics) {
      window.checkTelegramAnalytics();
    }
    
    // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è Telegram Web
    if (window.testTelegramWeb) {
      window.testTelegramWeb();
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ç–µ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    console.log('üì° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∫–ª–∞–¥–∫—É Network –≤ DevTools –¥–ª—è –∏—Å—Ö–æ–¥—è—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ tganalytics.xyz');
    
    checkAnalyticsStatus();
  };

  const testInTelegramWeb = () => {
    console.log('üåê –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è Telegram Web');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç Telegram
    const isTelegramContext = window.Telegram && window.Telegram.WebApp;
    console.log('üì± –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegram:', isTelegramContext ? '–î–∞' : '–ù–µ—Ç');
    
    if (isTelegramContext) {
      console.log('‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –≤ Telegram Web');
      console.log('üîó URL:', window.location.href);
      console.log('üì± –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:', window.Telegram.WebApp.platform);
    } else {
      console.log('‚ö†Ô∏è –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ù–ï –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ Telegram');
      console.log('üí° –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –±–æ—Ç–∞ –≤ Telegram Web');
    }
    
    if (window.testTelegramWeb) {
      window.testTelegramWeb();
    }
  };

  const StatusChip = ({ condition, label }) => (
    <Chip
      icon={condition ? <CheckCircle /> : <Error />}
      label={label}
      color={condition ? 'success' : 'error'}
      variant="outlined"
    />
  );

  if (showModal) {
    return (
      <TrialWelcomeModal
        open={showModal}
        onClose={() => setShowModal(false)}
        onBuyPremium={() => {
          setShowModal(false);
        }}
        trialExpired={blocked || (trialData?.trial?.isActive === false)}
      />
    );
  }

  return (
    <Box sx={{ p: 3, maxWidth: 600, mx: 'auto' }}>
      <Typography variant="h4" gutterBottom align="center">
        üî¨ –¢–µ—Å—Ç Telegram Analytics
      </Typography>

      <Card sx={{ mb: 3 }}>
        <CardContent>
          <Typography variant="h6" gutterBottom>
            –°—Ç–∞—Ç—É—Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
          </Typography>
          
          <Stack spacing={1} sx={{ mb: 2 }}>
            <StatusChip 
              condition={analyticsStatus.sdkLoaded} 
              label="Telegram Analytics SDK" 
            />
            <StatusChip 
              condition={analyticsStatus.telegramWebApp} 
              label="Telegram WebApp" 
            />
          </Stack>

          {analyticsStatus.errors.length > 0 && (
            <Alert severity="warning" sx={{ mb: 2 }}>
              <Typography variant="subtitle2">–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã:</Typography>
              <ul>
                {analyticsStatus.errors.map((error, index) => (
                  <li key={index}>{error}</li>
                ))}
              </ul>
            </Alert>
          )}

          <Button 
            variant="contained" 
            onClick={runAnalyticsTest}
            fullWidth
            sx={{ mt: 2 }}
          >
            üîÑ –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É
          </Button>

          <Button 
            variant="outlined" 
            onClick={testInTelegramWeb}
            fullWidth
            sx={{ mt: 1 }}
            color="primary"
          >
            üåê –¢–µ—Å—Ç Telegram Web
          </Button>
        </CardContent>
      </Card>

      <Card>
        <CardContent>
          <Typography variant="h6" gutterBottom>
            üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é
          </Typography>
          
          <Alert severity="info" sx={{ mb: 2 }}>
            <Typography variant="body2">
              <strong>–ö–∞–∫ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:</strong>
            </Typography>
          </Alert>

          <Box component="ol" sx={{ pl: 2 }}>
            <Typography component="li" variant="body2" sx={{ mb: 1 }}>
              –û—Ç–∫—Ä–æ–π—Ç–µ <strong>DevTools</strong> (F12) ‚Üí –≤–∫–ª–∞–¥–∫–∞ <strong>Console</strong>
            </Typography>
            <Typography component="li" variant="body2" sx={{ mb: 1 }}>
              –ù–∞–π–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —ç–º–æ–¥–∑–∏ üîç ‚úÖ ‚ùå üìä
            </Typography>
            <Typography component="li" variant="body2" sx={{ mb: 1 }}>
              –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É <strong>Network</strong>
            </Typography>
            <Typography component="li" variant="body2" sx={{ mb: 1 }}>
              –ò—â–∏—Ç–µ –∑–∞–ø—Ä–æ—Å—ã –∫ <code>tganalytics.xyz</code>
            </Typography>
            <Typography component="li" variant="body2" sx={{ mb: 1 }}>
              –í—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É: <code>checkTelegramAnalytics()</code>
            </Typography>
            <Typography component="li" variant="body2" sx={{ mb: 1, color: 'primary.main', fontWeight: 'bold' }}>
              üåê –î–ª—è Telegram Web: <code>testTelegramWeb()</code>
            </Typography>
          </Box>

          <Alert severity="success" sx={{ mt: 2 }}>
            <Typography variant="body2">
              <strong>üåê Telegram Web:</strong> –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –≤–∞—à–µ–≥–æ –±–æ—Ç–∞ –≤ web.telegram.org –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
            </Typography>
          </Alert>
        </CardContent>
      </Card>
    </Box>
  );
};

export default AnalyticsTest; 