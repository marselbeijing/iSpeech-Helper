import React, { useState, useEffect } from 'react';
import { RouterProvider, createBrowserRouter } from 'react-router-dom';
import { ThemeProvider, createTheme, CssBaseline } from '@mui/material';
import baseTheme from './theme';
import { getUserSettings } from './services/storage';
import { telegramColors } from './styles/TelegramStyles';
import { TrackGroups, TwaAnalyticsProvider } from '@tonsolutions/telemetree-react';
import { init } from '@telegram-apps/sdk-react';

import './i18n';
import { useTranslation } from 'react-i18next';
import { initTelegramWebApp } from './services/telegram';
import telegramAnalytics from '@telegram-apps/analytics';
import { initAudio } from './services/sound';
import { getCurrentUser } from './services/telegram';

// Trial period components
import TrialWelcomeModal from './components/TrialWelcomeModal';
import { getTrialStatus, markWelcomeSeen } from './services/trial';

// Components
import Root from './components/Root';
import Home from './pages/Home';
import Functions from './pages/Functions';
import Account from './pages/Account';
import Progress from './pages/Progress';
import Assistant from './pages/Assistant';
import SmoothReader from './components/SmoothReader';
import DAFMAF from './components/DAFMAF';
import BreathingExercises from './components/BreathingExercises';
import TongueTwisters from './components/TongueTwisters';
import MetronomeReader from './components/MetronomeReader';
import EmotionsTrainer from './components/EmotionsTrainer';
import AnalyticsTest from './pages/AnalyticsTest';
// import ProtectedComponent from './components/ProtectedComponent';

const TELEGRAM_ANALYTICS_TOKEN = 'eyJhcHBfbmFtZSI6ImlzcGVlY2hoZWxwZXIiLCJhcHBfdXJsIjoiaHR0cHM6Ly90Lm1lL2lTcGVlY2hIZWxwZXJfYm90L2lzcGVlY2giLCJhcHBfZG9tYWluIjoiaHR0cHM6Ly9pLXNwZWVjaC1oZWxwZXItdWNlNC52ZXJjZWwuYXBwLyJ9!B5PY86VQG7rW63+lZ9B1t642VCbXoDEdKO/UH9tQHCU=';

// Router configuration
const router = createBrowserRouter([
  {
    path: '/',
    element: <Root />,
    children: [
      {
        path: '/',
        element: <Home />
      },
      {
        path: '/functions',
        element: <Functions />
      },
      {
        path: '/account',
        element: <Account />
      },
      {
        path: '/progress',
        element: <Progress />
      },
      {
        path: '/assistant',
        element: <Assistant />
      },
      {
        path: '/smooth-reader',
        element: <SmoothReader />
      },
      {
        path: '/dafmaf',
        element: <DAFMAF />
      },
      {
        path: '/breathing',
        element: <BreathingExercises />
      },
      {
        path: '/tongue-twisters',
        element: <TongueTwisters />
      },
      {
        path: '/metronome',
        element: <MetronomeReader />
      },
      {
        path: '/emotions',
        element: <EmotionsTrainer />
      },
      {
        path: '/analytics-test',
        element: <AnalyticsTest />
      }
    ]
  }
], {
  future: {
    v7_startTransition: true,
    v7_relativeSplatPath: true
  }
});

// Main App component
const App = () => {
  const { i18n } = useTranslation();
  const [themeMode, setThemeMode] = useState('light');
  
  // Trial period state
  const [showWelcomeModal, setShowWelcomeModal] = useState(false);
  const [trialData, setTrialData] = useState(null);
  
  // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ö—É–∫–æ–≤ SDK
  const [initData, setInitData] = useState(null);
  const [launchParams, setLaunchParams] = useState(null);
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SDK
  useEffect(() => {
    try {
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º SDK
      init();
      console.log('‚úÖ Telegram SDK –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    } catch (error) {
      console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ SDK:', error.message);
    }
  }, []);
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ window.Telegram –∫–∞–∫ fallback
  useEffect(() => {
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º window.Telegram –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
      if (window.Telegram?.WebApp?.initDataUnsafe) {
        const webAppData = window.Telegram.WebApp.initDataUnsafe;
        setInitData({
          queryId: webAppData.query_id,
          user: webAppData.user,
          chatType: webAppData.chat_type,
          chatInstance: webAppData.chat_instance,
          startParam: webAppData.start_param,
          authDate: webAppData.auth_date,
          hash: webAppData.hash,
        });
        
        setLaunchParams({
          platform: window.Telegram.WebApp.platform,
        });
      }
    } catch (error) {
      console.log('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö Telegram:', error.message);
    }
  }, []);

  const telegramWebAppData = {
    query_id: initData?.queryId,
    user: initData?.user,
    chat_type: initData?.chatType,
    chat_instance: initData?.chatInstance,
    start_param: initData?.startParam,
    auth_date: initData?.authDate,
    hash: initData?.hash,
    platform: launchParams?.platform,
  };
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–π Telegram WebApp
  const isTelegramWebAppAvailable = () => {
    return window.Telegram && window.Telegram.WebApp;
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –º–µ—Ç–æ–¥–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ü–≤–µ—Ç–æ–≤
  const isColorMethodsSupported = React.useCallback(() => {
    return window.Telegram?.WebApp?.setHeaderColor && 
           window.Telegram?.WebApp?.setBackgroundColor;
  }, []);
  
  const updateTheme = React.useCallback((isDark) => {
    setThemeMode(isDark ? 'dark' : 'light');
    
    if (window.Telegram?.WebApp?.isExpanded && isColorMethodsSupported()) {
      try {
        window.Telegram.WebApp.setHeaderColor(isDark ? '#17212B' : '#FFFFFF');
        window.Telegram.WebApp.setBackgroundColor(isDark ? '#1F2936' : '#F0F2F5');
      } catch (error) {
        console.warn('Error setting Telegram WebApp colors:', error);
      }
    }
  }, [isColorMethodsSupported]);

  // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
  useEffect(() => {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram WebApp –±–µ–∑–æ–ø–∞—Å–Ω–æ
    try {
      initTelegramWebApp();
    } catch (error) {
      console.log('Telegram WebApp –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–∞');
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    const savedSettings = getUserSettings();
    if (savedSettings) {
      updateTheme(savedSettings.darkMode || false);
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
    const loadTrialStatus = async () => {
      try {
        console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞...');
        
        // –î–µ—Ç–∞–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        console.log('üîç –û—Ç–ª–∞–¥–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:');
        console.log('- window.Telegram:', !!window.Telegram);
        console.log('- window.Telegram.WebApp:', !!window.Telegram?.WebApp);
        console.log('- initDataUnsafe:', window.Telegram?.WebApp?.initDataUnsafe);
        console.log('- localStorage telegramUser:', localStorage.getItem('telegramUser'));
        console.log('- testLanguage:', localStorage.getItem('testLanguage'));
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const user = getCurrentUser();
        console.log('üë§ –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', user);
        
        if (!user?.id) {
          console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏');
          // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–∫–Ω–æ –¥–∞–∂–µ –±–µ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          setShowWelcomeModal(true);
          return;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
        const trialStatus = await getTrialStatus(user);
        // trialData —É–¥–∞–ª—ë–Ω –∫–∞–∫ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ–≥–æ –µ—â–µ –Ω–µ –≤–∏–¥–µ–ª
        if (!trialStatus.hasActiveSubscription && trialStatus.trial && !trialStatus.trial.hasSeenWelcome) {
          console.log('üéâ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞');
          setShowWelcomeModal(true);
        } else {
          console.log('‚ÑπÔ∏è –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º:', {
            hasActiveSubscription: trialStatus.hasActiveSubscription,
            hasSeenWelcome: trialStatus.trial?.hasSeenWelcome
          });
        }
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞:', error);
        // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–∫–Ω–æ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        console.log('üé≠ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ–º–æ-–æ–∫–Ω–æ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏');
        setShowWelcomeModal(true);
      }
    };

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç—É—Å —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π —á—Ç–æ–±—ã Telegram WebApp —É—Å–ø–µ–ª –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è
    setTimeout(loadTrialStatus, 1000);

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞—É–¥–∏–æ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –∫–ª–∏–∫–∞
    const handleFirstUserInteraction = async () => {
      try {
        await initAudio();
        console.log('üîä AudioContext –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø–æ—Å–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∂–µ—Å—Ç–∞');
      } catch (error) {
        console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å AudioContext:', error.message);
      }
      // –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
      document.removeEventListener('click', handleFirstUserInteraction);
      document.removeEventListener('touchstart', handleFirstUserInteraction);
    };

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
    document.addEventListener('click', handleFirstUserInteraction, { once: true });
    document.addEventListener('touchstart', handleFirstUserInteraction, { once: true });

    // Cleanup —Ñ—É–Ω–∫—Ü–∏—è
    return () => {
      document.removeEventListener('click', handleFirstUserInteraction);
      document.removeEventListener('touchstart', handleFirstUserInteraction);
    };
  }, [i18n.language, updateTheme]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–º—ã –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
  useEffect(() => {
    const handleThemeChange = (event) => {
      const isDark = event.detail.darkMode;
      updateTheme(isDark);
    };

    window.addEventListener('themeChanged', handleThemeChange);
    return () => window.removeEventListener('themeChanged', handleThemeChange);
  }, [updateTheme]);
  
  useEffect(() => {
    const isDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ü–≤–µ—Ç–æ–≤
    const setColors = () => {
      if (isColorMethodsSupported()) {
        try {
          window.Telegram.WebApp.setHeaderColor(isDark ? '#17212B' : '#FFFFFF');
          window.Telegram.WebApp.setBackgroundColor(isDark ? '#1F2936' : '#F0F2F5');
        } catch (error) {
          console.warn('Error setting Telegram WebApp colors:', error);
        }
      }
    };

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤
    setColors();

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–º—ã
    if (isTelegramWebAppAvailable()) {
      try {
        const colorScheme = window.Telegram.WebApp.colorScheme;
        setThemeMode(colorScheme === 'dark' ? 'dark' : 'light');
        setColors();

        window.Telegram.WebApp.onEvent('themeChanged', () => {
          try {
            const newColorScheme = window.Telegram.WebApp.colorScheme;
            setThemeMode(newColorScheme === 'dark' ? 'dark' : 'light');
            setColors();
          } catch (error) {
            console.warn('Error handling theme change:', error);
          }
        });
      } catch (error) {
        console.warn('Error setting up theme listener:', error);
      }
    } else {
      // –ï—Å–ª–∏ Telegram WebApp –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');
      setThemeMode(mediaQuery.matches ? 'dark' : 'light');

      mediaQuery.addEventListener('change', (e) => {
        setThemeMode(e.matches ? 'dark' : 'light');
      });
    }
  }, [isColorMethodsSupported]);
  
  useEffect(() => {
    // –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Telegram WebApp
    const checkTelegramWebApp = () => {
      if (window.Telegram && window.Telegram.WebApp) {
        console.log('‚úÖ Telegram WebApp –∑–∞–≥—Ä—É–∂–µ–Ω');
        console.log('üì± –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:', window.Telegram.WebApp.platform);
        console.log('üÜî –í–µ—Ä—Å–∏—è:', window.Telegram.WebApp.version);
        console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', window.Telegram.WebApp.initDataUnsafe?.user || '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ');
        return true;
      }
      return false;
    };

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    const initAnalytics = () => {
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤ Telegram WebApp
        const isInTelegram = !!(
          window.Telegram?.WebApp?.initDataUnsafe?.user ||
          window.Telegram?.WebApp?.platform ||
          window.location.search.includes('tgWebAppPlatform')
        );

        if (!isInTelegram) {
          console.log('üì± –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –≤–Ω–µ Telegram, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é Analytics');
          return;
        }

        if (!TELEGRAM_ANALYTICS_TOKEN) {
          console.log('‚ö†Ô∏è –¢–æ–∫–µ–Ω Analytics –Ω–µ –Ω–∞–π–¥–µ–Ω');
          return;
        }

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ
        telegramAnalytics.init({
          token: TELEGRAM_ANALYTICS_TOKEN,
          debug: process.env.NODE_ENV === 'development'
        });
        
        console.log('üìä Telegram Analytics –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ');
        
      } catch (error) {
        console.warn('‚ö†Ô∏è Analytics –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Ä–µ–∂–∏–º–µ –±—Ä–∞—É–∑–µ—Ä–∞:', error.message);
        // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
      }
    };

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º Telegram WebApp
    if (checkTelegramWebApp()) {
    initAnalytics();
    } else {
      console.log('‚ö†Ô∏è Telegram WebApp –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Ä–∞–±–æ—Ç–∞–µ–º –≤ —Ä–µ–∂–∏–º–µ –±—Ä–∞—É–∑–µ—Ä–∞');
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø–ª–∞—Ç–µ–∂–µ–π
    const setupPaymentHandlers = () => {
      if (window.Telegram && window.Telegram.WebApp) {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
        window.Telegram.WebApp.onEvent('invoiceClosed', (eventData) => {
          console.log('üí∞ –ü–ª–∞—Ç–µ–∂ –∑–∞–≤–µ—Ä—à–µ–Ω:', eventData);
          
          if (eventData.status === 'paid') {
            console.log('‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω!');
            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
            // –ù–∞–ø—Ä–∏–º–µ—Ä, –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
          } else if (eventData.status === 'cancelled') {
            console.log('‚ùå –ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω');
          } else if (eventData.status === 'failed') {
            console.log('‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ —É–¥–∞–ª—Å—è');
          }
        });
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è popup
        window.Telegram.WebApp.onEvent('popupClosed', (eventData) => {
          console.log('üîî Popup –∑–∞–∫—Ä—ã—Ç:', eventData);
        });
      }
    };

    setupPaymentHandlers();
  }, []);
  
  const handleStartTrial = async () => {
    try {
      console.log('üöÄ handleStartTrial –≤—ã–∑–≤–∞–Ω');
      
      console.log('üîÑ –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ...');
      setShowWelcomeModal(false);
      console.log('‚úÖ –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ');
      
      console.log('üìä –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞...');
      const status = await getTrialStatus();
      console.log('üìä –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞:', status);
      setTrialData(status);
      console.log('‚úÖ handleStartTrial –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞:', error);
    }
  };

  const handleBuyPremium = () => {
    console.log('üõí handleBuyPremium –≤—ã–∑–≤–∞–Ω');
    setShowWelcomeModal(false);
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ø–æ—Å–æ–±–æ–≤ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
    const navigateToAccount = () => {
      // –°–ø–æ—Å–æ–± 1: –ò–∑–º–µ–Ω—è–µ–º hash
      window.location.hash = '/account';
      
      // –°–ø–æ—Å–æ–± 2: –ï—Å–ª–∏ hash –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –∏—Å–ø–æ–ª—å–∑—É–µ–º replace
      setTimeout(() => {
        if (!window.location.hash.includes('account')) {
          window.location.replace(window.location.origin + window.location.pathname + '#/account');
        }
      }, 100);
      
      // –°–ø–æ—Å–æ–± 3: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–º–æ–≥–ª–æ
      setTimeout(() => {
        if (!window.location.hash.includes('account')) {
          console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è –Ω–∞ /account');
          window.location.href = '#/account';
        }
      }, 300);
    };
    
    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    setTimeout(navigateToAccount, 150);
  };

  const handleCloseWelcome = async () => {
    try {
      await markWelcomeSeen();
      setShowWelcomeModal(false);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è:', error);
    }
  };
  
  // –°–æ–∑–¥–∞–µ–º —Ç–µ–º—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
  const theme = createTheme({
    ...baseTheme,
    palette: {
      ...baseTheme.palette,
      mode: themeMode,
      primary: {
        ...baseTheme.palette.primary,
        main: themeMode === 'dark' ? telegramColors.dark.primary : telegramColors.light.primary,
        light: themeMode === 'dark' ? telegramColors.dark.secondary : telegramColors.light.secondary,
      },
      background: {
        default: themeMode === 'dark' ? telegramColors.dark.background : telegramColors.light.background,
        paper: themeMode === 'dark' ? telegramColors.dark.paper : telegramColors.light.paper,
      },
      text: {
        primary: themeMode === 'dark' ? telegramColors.dark.text : telegramColors.light.text,
        secondary: themeMode === 'dark' ? telegramColors.dark.textSecondary : telegramColors.light.textSecondary,
      },
      divider: themeMode === 'dark' ? telegramColors.dark.divider : telegramColors.light.divider,
    },
  });

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω–æ –ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ Telegram
  const isTelegramApp = window.Telegram?.WebApp && initData?.user;

  const AppContent = () => (
    <ThemeProvider theme={theme}>
      <CssBaseline />
      <RouterProvider router={router} />
      
      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ */}
      <TrialWelcomeModal
        open={showWelcomeModal}
        onClose={handleCloseWelcome}
        onStartTrial={handleStartTrial}
        onBuyPremium={handleBuyPremium}
      />
    </ThemeProvider>
  );

  // –ï—Å–ª–∏ –≤ Telegram, –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ TwaAnalyticsProvider, –∏–Ω–∞—á–µ —Ä–µ–Ω–¥–µ—Ä–∏–º –Ω–∞–ø—Ä—è–º—É—é
  return isTelegramApp ? (
    <TwaAnalyticsProvider
      projectId="846989d7-5b58-4f6a-93ba-715073e6b596"
      apiKey="b6efef23-b414-42d9-ba9b-e011acf410f5"
      trackGroup={TrackGroups.MEDIUM}
      telegramWebAppData={telegramWebAppData}
    >
      <AppContent />
    </TwaAnalyticsProvider>
  ) : (
    <AppContent />
  );
};

export default App; 